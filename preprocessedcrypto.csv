,title,content,complete_tags,words_in_tags
0,secure otr protocol,using adium wondering secure believe uses aes-256 understand means default requests users exchange fingerprints encrypted conversations occur unique key used conversation logging turned depending user preference allow users suspect snooping breathe easier show,encryption aes otr,encryption aes otr
1,current known weaknesses/attacks quantum key distribution,writing paper implementation qkd future want know viable attacks bb84 protocol qkd general know photon number splitting spectroscopy case diode manufacturing heard solutions attacks missed,cryptanalysis attack quantum-cryptography key-distribution,cryptography cryptanalysis attack key quantum distribution
2,hill key space,key space set possible keys used generate key using number valid key describe given hill cipher block size k alphabet size p p prime many keys valid key hill cipher key k x k matrix elements getting size p alphabets understanding number possible keys p^ k^2 answer p^k-p^0 \times p^k-p^1 \times p^k-p^2 \times\cdots\times p^k-p^ k-1 believe related matrix inverse know determine edit reading key size hill cipher wiki got known something example shown case inverses co-factor .the number invertible n blocks alphabets n^ 1-1/2 1-1/2^ \cdots 1-1/2^ n 1-1/13 1-1/13^ \cdots 1-1/13^ n apply p prime p divide p^ k^2 result p^ k^2 1-p^ -1 1-p^ -2 \cdots 1-p^ -k different answer,keys prime-numbers classical-cipher hill-cipher,prime classical keys cipher numbers hill
3,digipass-like,sure famous algorithms problem knowledge field need lights si problem alice sends key x bob bob function given key x time generates key seconds valid seconds bob send recent alice consider key valid bob sens old alice consider key valid mathematical formulation functions e int e int x int time bool result int x int int time variable x functions variable time value changes function return true time argument generated argument d. people battle.net account recognize looking logic blizzard authentificator case authentificator bob question functions e d. guess tons possibilities famous algorithms used typical problem,authentication,authentication
4,ideal s-box,read linear cryptanalysis s-box ideal s-box ideal s-box random s-box words s-box bias input output bits read implementation s-box post understand s-box implementing lookup tables read post e-sushi answer non-linearity randomness aspects s-box trust fact chances you’ll manage create good s-box using current criteria minimal… minimal understand random ideal s-box lookup tables implement random s-box restriction limitation,s-boxes linear-cryptanalysis,boxes linear cryptanalysis
5,generate hash value using public key message,trying understand way signature chaining message saxena soh message passed user user combine signature create single signature message m. aggregated signature passed public key users signed message used prove message seen user chain signature protocol defined steps understand chainsign step message get different hash values h different values l know hash function takes message input yield hash value sequence public keys y1 y2 y3 ... .yi fed get different hash values add key message hash function get new digest mapping happening,hash hash-signature,hash signature
6,md5 ssl collision attack,want create fake certificate test purposes read http //marc-stevens.nl/p/hashclash/index.php project unable understand files put order create collision attack created ssl x.509 v3 md5 encryption file second,hash tls collision-resistance md5 openssl,tls hash openssl resistance collision md5
7,difference one-shot mpc protocol unbounded invocation multiple mpc protocols,paper pg section security continual leakage authors say remark weaker security notion achieved extended continual leakage mpc setting address setting n users perform one-shot mpc protocol engage unbounded number mpc protocols many functions mpc invocation adversary leaks \ell bits honest party’s internal state confused difference one-shot mpc protocol vs. unbounded number mpc protocols envisioning something mpc protocol leaks \ell bits honest party internal state mpc protocol leaks \ell new bits honest party internal state mpc protocol leaks \ell new bits honest party internal state ... mpc protocol k leaks \ell new bits honest party internal state total n honest parties total leakage n \times \ell k bits consider one-shot mpc protocol get n \times \ell bits leaked give example threshold cryptography say bunch parties compute decryption function end entire decryption key leaked time \ell bits leaked think \ell bits decryption key leaked authors considering unbounded number mpc protocols,multiparty-computation threshold-cryptography,threshold cryptography computation multiparty
8,cryptographic hash used cryptographic rng,say roll sided die times ~2^517 string results string numbers hash result sha-512 use result cryptographic purposes keys use hash result generate keys,hash key-derivation pseudo-random-generator,hash derivation generator random pseudo key
9,comparison complexity measures vs. security,assume want compare several cryptographic primitives say encryption schemes choose need consider several complexity measures key length encryption time decryption time etc order comparison fair primitives question provide level security example let consider rsa ecc ntru assume want cryptosystem secure passive adversary whose computational power limited operations passive adversary mean adversary limited chosen-plaintext attacks comparing public-key encryption schemes want know key length chosen scheme answer question consider complexity efficient attacks rsa ecc ntru turn requires great knowledge literature resource/survey website paper tool etc helps comparisons note website keylength.com helpful tool answer question reason keylength.com recommends minimum key length used different scenarios say symmetric asymmetric encryption leaves concrete schemes say ntru twofish serpent etc,encryption cryptanalysis resources key-size reference-request,reference encryption request cryptanalysis key resources size
10,twisted curves protocol,come twisted curves instance defined brainpool specifications f p -isomorphic regular f p equivalents brainpoolp256r1 isomorphic brainpoolp256t1 protocol make sense specify support twisted curves possible specify twisted curve oid f p equivalent using twisted curve representation curve performance benefits regular representation twisted curve representation used security analysis curve,cryptanalysis elliptic-curves,curves elliptic cryptanalysis
11,difference long term key session keys,studying secret key cryptography come terms long-term key session key difference kinds keys,encryption symmetric keys key-exchange,symmetric encryption keys key exchange
12,encrypting private public keys produce result,let say e n encrypt example m=15 get m_1 m^e=15 \mod \qquad m_2 =m^d= \mod rsa bad question prompted answer hash salt signing work,rsa modular-arithmetic,modular rsa arithmetic
13,given unencrypted encrypted data aes-gcm possible calculate chiper key aes-gcm,sorry simple curiosity given unencrypted encrypted data aes-gcm possible calculate chiper key aes-gcm,aes,aes
14,causes first block aes decryption garbled correct iv,attempting duplicate wireshark packet capture decryption tls http session control private key server cipher suite number tls_rsa_aes_128_cbc_sha wrote utility takes packet captures using libpcap match logs wireshark say terms mac keys write keys iv printing binary data hex characters confirm keyblock ciphertext identical wireshark log display perform following decryption steps ... decrypt pre_master_secret generate keyblock ... initialize cipher context evp_cipher_ctx_init myevp evp_cipherinit_ex myevp cipher null wkey iv logerror evp_cipherinit_ex err_error_string err_get_error nul dec evp_decryptupdate myevp outb outlen data datalen totalcount += outlen dec logerror evp_decryptupdate err_error_string err_get_error nul dec blocklen dec evp_decryptfinal_ex myevp outb totalcount outlen totalcount += outlen ... get padding last bit outb remove padding outb plaintext ... remove mac plaintext resultant plaintext get identical wireshark spits logs execption first block decrypted data know general caused correct initialization vector begin decryption computed keyblock values seem correct say jive wireshark spitting first blocks wireshark shows ... ... mine plaintext_update e1 a2 f4 b3 d1 c4 f4 d8 c9 ... first block verify decryption step context correct original iv value current logdata evp myevp- evp.oiv myevp- evp.cipher- iv_len logdata evp iv myevp- evp.iv myevp- evp.cipher- iv_len wireshark client write iv c0 c5 dc mine evp iv c0 c5 dc likewise keys think need illustrate values remaining blocks decrypt checked make sure first block gzipped whatever checked wireshark code equivalent stuff libgpgcrypt anybody seen anything,encryption aes tls cbc,tls encryption aes cbc
15,additive homomorphic encryption supports exponentation,example say numbers b. partial homomorphic encryption scheme allows compute a-b ^2 ciphertexts b round trips,encryption elliptic-curves homomorphic-encryption elgamal-encryption probabilistic-encryption,elgamal encryption homomorphic curves elliptic probabilistic
16,generate rsa public/private key pair passphrase sufficient entropy,possible generate public/private rsa key pairs passphrases giving key generating algorithm data made key-stretching passphrase source random data sufficient strong extra credit possible generate key pair public private passphrase public key generated public passphrasse private key use trying deal difficulties using rsa keys pasted/exchanged things,rsa public-key key-derivation,derivation rsa key public
17,lightweight hash function,researching lightweight hash functions got related questions standard requirement hash function general considered lightweight said photon hash function lightweight,one-way-function,function way
18,rsa cryptosytsem choosing e,using rsa crytposytem p q hence n \phi understand get e gcd e \phi =1 many thanks,rsa,rsa
19,xoring header sha512-hash secure,writing application encrypts text several times stores result result looks complete random bytes add random bytes end let program know real encrypted text ends put header beginning file header consists bytes h header h_0 h_1 magic numbers chosen numbers check file h_2 h_3 h_4 h_5 show length text 32-bit integer h_6 h_7 random fill header bytes make header look random bytes program find files xor header-bytes sha512-hash password hash h_i h_i s_i s_ i+8 s_ i+16 s_ i+24 s_ i+32 s_ i+40 s_ i+48 s_ i+56 makes file look random bytes think reveals information sha512-hash password least bytes header known others predicted looking size file help attacker find password rainbow table magic numbers help attacker eliminate password-hashes magic numbers known hashes xor magic numbers bytes given file question way securing header insecure think prevent know prefer method xoring hashing,encryption hash sha-512,encryption hash sha
20,information-theoretic bound leakage timing measurement,looking information-theoretic bound leakage timing measurement assuming attacker wants leak black box secret key k bits injected black box written black box code read key act craft code point choosing duration function performed black box n spaced durations t_j=t_0+j/ n-1 j n t_j units clock period t_0 known measure duration function uncertainty u according distribution u |u| stated execution function looking tight upper number timing measurements leak whole key sure k remains secret execution leaks \log_2 n bit worth information way timing measurement least \lceil k/\log_2 n \rceil timing measurements required extract key sole mean bound reached attacker \big\lceil\log_2\big \lceil k/\log_2 \rceil\big \big\rceil bits permanent storage black box survive function execution sketch write key k base n permanent storage used counter telling digit k leaked update realize bound \lceil k/\log_2 n \rceil measurements applies attacker choose input black box code act makes q1 q2 less relevant q1 attacker code permanent storage true random number generator internal blackbox appropriate way characterize number measurements required leak key q2 situation q1 attacker obtains addition timing measurement large random input output black box available attacker code q3 attacker uncertainty distribution u becomes significant consider u discrete uniform distribution m-1 u gaussian something u sum discrete uniform distribution m-1 rationale true goal reached answer q3 conditions q2 assessing demonstrable effectiveness countermeasure timing attacks smart cards assumed running consisting inserting random sensitive operation q3 hypothesis attacker written code course worst case scenario crafted order obtain upper bound leakage lower number measurements necessary q2 asked real situation attacker write code reasonable believe equivalent permanent storage usable attacker input output deterministic effect timing q1 introduction q2 data dependency,side-channel-attack,attack side channel
21,help understanding basic franklin-reiter related message attack,trying understand attack basic level set following basic scenario let public encryption exponent e let p arbitrary known padding couple characters suppose intercepted encrypted messages c_1 c_2 bob alice c_1 \equiv m_1^3 mod n c_2 \equiv m_1 p ^3 mod n answer question understanding find determine gcd m_1^3 c_1 m_1 p ^3-c_2 right go using euclidean algorithm look polynomials familiar finding gcd polynomials using ea seem figure apply,rsa,rsa
22,generating child keys hill climb algorithm,"little pet project writing code little cryptanalysis starting something simple created hill climbing algorithm solving simple substitution start generating parent key shuffling letters a-z first iteration generating child key swapping characters parent key subsequent iteration shuffling characters previous iteration key approach works seems inefficient randomness seems generate key attempt solution question better solution generating child keys random things considered tried memorizing previous keys checking new random key tried means shuffling characters swap 1-2 1-3 1-4 ... 2-3,2-4 ... etc feels brute force strike making algorithm less efficient ie overhead outweighs gain made using random chance particular thoughts edit comments pointed problem facing generate better child keys avoid local maximum relevant details algorithm follows scoring based sum log10 probability quadgrams running algorithm iterations provided better score running entire thing tries produced better score",cryptanalysis,cryptanalysis
23,confusion regarding computing multiplicative inverse modulo p,doubt please rectify confusion regarding problem concreteness assume g=2 p=11 a=6 x=9 g^a \bmod p \bmod x g^x \bmod p \bmod c a^x \bmod p \bmod find x i.e g^x using c x c^ a^ -1 \bmod p -1 \bmod \bmod answer x x x \neq x problem mistake,diffie-hellman number-theory group-theory,diffie hellman number group theory
24,carmichael number factoring,unsure right forum question try task im faced implement poly-time algorithm finds nontrivial factor carmichael number many resources web states easy explanation miller-rabbin exits nontrivial square root found used find factor carmichael number x^2 \equiv x+1 x-1 \equiv0\ mod\ n carmichael number want factor hence factors found using \gcd x+1 \gcd x-1 n correct due problems strong liars cases miss factors major problem miller-rabbin tests passes composites probability correct say chances finding factor kind regards,number-theory factorization,number factorization theory
25,achieving 256-bit encryption strength hmac-sha1,interested theoretical consideration bit strength encryption key precursor assume given environment follows encryption aes-256 b. key derivation function hmac-sha1 b1 salt strength bit chars random hex string b2 iteration count objective achieve bit encryption strength based environment achieve true 256-bit total strength environment stated randomness provided sha1 pbkdf2 standard bit rsa document pkcs v2.0 password-based cryptography standard march length derived key unbounded maximum effective search space derived key limited structure underlying pseudorandom function ... derived key consisting several pseudorandom function outputs produced key effective search space derived key bits specific limitation key sizes depends details hmac construction assume conservative effective search space limited bits key questions expect 160-bit encryption strength existing environment feed result pbkdf2 output skein 512-512 hash function left-most hex =244 bit characters output encryption key sought-after 256-bit total encryption strength added bit extra strength due iteration count calculations,aes passwords key-derivation,aes passwords derivation key
26,way calculate public exponent e rsa,"learning rsa classes given problem p q done following steps \cdot \phi 5-1 \cdot know find e find integer co-prime \phi \phi \gcd e,40 algorithm use hand give e know numerous values method shown enumerate prime find first divisible totient \phi assume give small numbers exam trial error time consuming understand use extended euclids algorithm find inverse e provided know e struggle finding e",rsa prime-numbers,prime rsa numbers
27,rsa key generation public exponent big,writing paper rsa self-chosen subject writing key-generation rsa problem finding public exponent e. chosen q determined modulus n p ⋅ q phi n p-1 q-1 bothers try generate public exponent e using cryptool given parameters gives e thought less phi n p-1 q-1 according source ok break rule cryptool faulty,rsa public-key,rsa key public
28,load-balance https traffic based tls sni,possible snoop https traffic detect tls sni attempted used client redirect stream connection as-is many different upstreams requires https order connect certificate known,tls key-exchange initialization-vector standards,tls exchange initialization standards vector key
29,calculating amount time brute forcing ciphertext depending size key,graphic design student information graphic project chosen topic history encryption security level developed centuries it’s information graphic make people aware encryption importance times see news nsa et taking several encryption concepts caesar cipher jefferson wheel something modern aes calculate brute-force time maximum key size main point want show security level grew size grew problem wanted calculate key size research key sizes specific encryption concepts addition wanted calculate brute force time attack encryption find long takes crack individual encryption know simple approach wanted keep simple possible i’m sure calculated appreciate someone explain understand example brute-force computer found www.orange.co.jp/~masaki/rc572/ratej.php keys/sec set brute-force pc vs. pc using specific encryption everything calculated wolframalpha.com caesar cipher got possible combinations characters wikipedia says means time seconds ns enigma wikipedia says it’s long possible keys keys/2096204400 keys/s average gregorian years calculations correct,encryption brute-force-attack,encryption attack force brute
30,necessary encrypt nonce cryptographic communication,server client pre-shared key k. assuming pre-shared key safe nobody server/client encrypt/decrypt client sends nonce n server server sends message encrypted form aes_cbc_encrypt m+n k iv client client verify replay attack trying send expired message necessary client send encrypted form aes_cbc_encrypt n k iv ok send n clear n 16-byte array m+n means concatenation n,encryption nonce,nonce encryption
31,algebraic cryptanalysis public-key schemes,book algebraic cryptanalysis bard g.v springer speaks transforming symmetric scheme system polynomial equations solving equations break scheme way asymmetric schemes impossible techniques kind scheme,public-key cryptanalysis algebraic-attack,algebraic attack public key cryptanalysis
32,vectorized fast hardware-accelerated aes-gcm,understand norx gets cpb unoptimized implementation parallelized 4-way simd expect cpb performance good aes-gcm hardware something wrong assesment parallel better choice speed chacha20-poly1305 sequential versions primary recommendations questions w.r.t keyak cpb 2-way parallelism cpb 4-way parallelism,aes chacha norx keyak,aes norx keyak chacha
33,n way collision hashes,collision h a_1 h a_2 number queries t^ \log_2 length hash output number queries requried find n -collision h a_1 h a_2 ... .. h a_n,hash collision-resistance birthday-attack,collision attack birthday hash resistance
34,prng algorithm allows switch states calling next,need function following interface getrandombytes uint128 seed uint64 state uint16 bytecount consecutive calls seed state give results algorithm look,random-number-generator,random number generator
35,gpg encryption data length different text data bytes,using gpg2 base64 commands algorithm input encrypted bytes input data fixed length bytes current problem run gpg command times encrypted data bytes byes,pgp,pgp
36,perform frequency analysis substitution cipher using base64 alphabet,let imagine cipher works following plaintext encoded base64 characters encoded substituted shuffled character set a-z 0-9 shuffled alphabet essence key complex secure ... wanted frequency analysis example runforyourlife encoded base64 ulvork9swu9vukxjrku= character set shuffled final cryptext look something xv24dyg9qxg2xyg6dyxf key yhac5btoweyvbxcpvuomjldg8p1jhn3zisi67srk4e_d9-x2qrqmnlkwuaft0g=zf shuffled version abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789-_= let assume character set subsequent messages order ie key re-used bytes split resulting different character units correspond frequency analysis feasible encoding plaintext way encryption add form security question pertains longer messages example short sort real analysis,encryption substitution-cipher encoding frequency-analysis,encoding encryption analysis cipher frequency substitution
37,modify data protected crc16,bytes crc16 know want change byte known value x value fix crc16 valid knowing bytes 50-100. possible tcp checksum addition crc16 polynomial possible,mac crc,crc mac
38,interactive assumptions falsifiable,someone explain interactive assumption falsifiable misunderstanding statement means non-interactive assumption interactive zero amount interaction context isolated paragraph intro paper due series criticisms starting cgh98 practical schemes proposed proved secure standard model i.e. random oracles falsifiable non-interactive assumptions paper mentions define term falsifiable,encryption,encryption
39,rsa keys safety given key-length different signing vs encryption,wondering considerations key-length different thinking signing vs encryption reason safter use smaller keys signing interesting,rsa key-size,rsa key size
40,notation hash function identity-based encryption,h \rightarrow z_ p h \rightarrow z_ p h \rightarrow g_ h \rightarrow g_ difference meaning z_ p z_ p g_ g_,identity-based-encryption,encryption based identity
41,low entropy plaintext compressible,comes following discussion colleague plaintext file plain consists lines work play ... size mb compressed encrypt original aes-128-cbc -in plain plain.enc plain.enc bigger original expect compress encrypted copy gzip plain.enc observe compressed copy larger plain.enc assuming entropy original file order bits corresponding ciphertext incompressable intuitive notion entropy string minimal number bits required produce string string mb text generated 1000-bit entropy string encrypted aes implementation thousand bits few-hundred bit key entropy cipher text sum entropies strings procedures generate question intuitive notion wrong extended low-entropy file orders magnitude larger begin observe compressibility ciphertext,encryption entropy compression,encryption compression
42,feed-forward mechanism used hash functions,compression function sha-1 used davies-meyer mode adds input chaining values final step message block iv used input next step previous block output specified merkle-damgard used values fed last round compression function removing feed-forward part i.e. final step input value added result get final output make hash function insecure fact compression function satisfy desired randomness properties permutation fixed message,hash,hash
43,encrypting files known headers,file known lengthy header e.g xml excel file render encrypted file susceptible known plain text attack words x bytes decrypted text known weaken encryption remaining data,encryption known-plaintext-attack,known encryption plaintext attack
44,best plain cryptography method use computer,best cryptography method use computer list current options available used use computer system/electronic device like identify types cryptography techniques used small amount hand written plain text numbers symbols characters hard implement easy implement like brief description e.g types cipher's different types algorithm range security low high etc,algorithm-design encryption security-definition,encryption security design algorithm definition
45,symmetry finite cyclic groups z/pz ∗,known \leq \leq \frac p − g^ i+ p−1 /2 g^ i−1+ p−1 /2 − g^i g^ i−1 \pmod p whilst working finite cyclic group prime moduli z/pz ^* given g primitive root p. property used improve trial multiplication algorithm see http //eprint.iacr.org/2014/291,group-theory,group theory
46,mouse movement coordinates useful seed rng,good use mouse movement 64-bit random seed pseudorandom generator aes counter mode need get x coordinates mouse movement,random-number-generator randomness,randomness random number generator
47,shamir id based signatures notation issues,implementing shamir id based signature scheme defined original paper archive link sign verify operation defined follows sign g r^ f \mod verification s^e t^ f \mod n troubles convert java code unsure order evaluation i.e. unsure modulus refers context hole right hand side including multiplication exponentiation operation ps related question,signature identity-based-encryption,encryption based identity signature
48,group diffie-hellman,understand diffie-hellman key-exchange works parties agrees prime p generator g party selects private exponenet x computes public value g^x \bmod p sends second party second party chooses public exponent computes public value g^y \bmod p sends first party parties compute g^ xy shared secret protocols descriptions tls find say client sends hello message includes diffie-hellman public values client preferred groups group refers,diffie-hellman tls group-theory,tls diffie hellman theory group
49,aes key block length subsets rijndael selected,intuition tells trade speed security standardisation process select arbitrary key lengths aes-128 aes-192 aes-256,aes block-cipher key-size history rijndael,aes rijndael cipher key size block history
50,using single ed25519 key encryption signature,libsodium documentation contains function crypto_sign_ed25519_pk_to_curve25519 converts ed25519 key curve25519 used key exchange/encryption signing ed25519 keys converted curve25519 keys key pair used authenticated encryption crypto_box signatures crypto_sign page ends notes using distinct keys signing encryption recommended question reusing ed25519 keypair uses proven secure example sense joint security encryption signature similar paper constructions seem eddsa signature i.e schnorr signature done ephemeral dh key exchange using one-time keypair sender side recipient public key mapped curve25519 involve one-time ephemeral keypair hash function fine random oracle model assume eddsa nonce function key message random get domain separation including separation tag key exchange i.e alice wants send file bob whose public key q picks pair r r.p sets key k h r.q key signature something similar fine random oracle model someone dis proved,encryption public-key elliptic-curves signature ed25519,key encryption curves elliptic signature ed25519 public
51,papers explaining port textbook rsa realworld rsa,papers books link explains plain vanilla textbook rsa implemented practice padding stuff like know intricacies implementing algorithm production level code…,encryption rsa algorithm-design reference-request,algorithm reference encryption request rsa design
52,md5 collision smallest input values,interested md5 collisions small input messages collision examples given http //www.mscs.dal.ca/~selinger/md5collision/ show different strings tiny amount data changed give md5 feels changing values factored calculation come example random things reach value try small script find get formalisation question minimal b\in\mathbb n exists b \mathbf md5 =\mathbf md5 b,collision-resistance md5,collision resistance md5
53,deterministic property ec dsa security problem,read wikipedia article elliptic curve dsa security deterministic generation k help prevent certain type attacks happened sony deterministic property predictable compared probabilistic encryption seems rsa use padding make non-deterministic security point view undesirable,rsa dsa,rsa dsa
54,performance ecdsa eckcdsa ecgdsa,ecdsa algorithms faster key signature generation compared rsa addition signatures much shorter like know performance difference variants eckcdsa compared ecdsa rsa ecgdsa avoids calculation inverse signing phase significant performance increase eckcdsa algorithm public keys validated means certificates step decrease performance,elliptic-curves dsa performance,performance curves elliptic dsa
55,choose aes-ccm aes-gcm storage volume encryption,using encryption built solaris zfs offers choice ccm cbc counter mode gcm galois counter mode pros cons choosing cipher modes,aes gcm ccm,ccm aes gcm
56,someone crack private key passphrase,lets say pgp/gpg pair passphrase,passwords pgp,passwords pgp
57,difference sha-3 keccak previous generation sha algorithms,sha-1 sha-2 share structure mathematical operation predecessors sha-0 md5 sha-0 md5 main reasons sha-1 considered insecure phased sha-2 nist announced competition produce next generation nist hash function sha-3 major difference structure mathematical operation previous sha-1 sha-2 functions sha-3,hash algorithm-design sha-1 sha-2 sha-3,design hash algorithm sha
58,deriving key hmac using pbkdf2,recommended way derive key hmac-sha256 passphrase salt compute hmac-sha256 passphrase message note rfc-7518 jwa states hmac key size hash output instance bits hs256 larger used algorithm requirement based section security effect hmac key nist sp 800-117 states effective security strength minimum security strength key times size internal hash value conclude recommended use bytes passphrase key passphrase appropriate entropy ascii characters length ascii question correct ok next derive key note pbkdf2 hmac-sha256 produce keys question ... turtles situation using hmac-sha256 low-entropy key derive higher-entropy key hmac-sha256 heck time searching forum question uses term hmac password pbkdf2 sha-256 want know sensible use pbkdf2 hmac-sha256 ... derive key used hmac-sha256,hmac pbkdf-2,pbkdf hmac
59,defending hybrid encryption schemes padding oracle attacks,intend use generic integrated/hybrid encryption scheme transmitting information client server key encapsulation 128-bit symmetric key generated encrypted data encapsulation iv generated plaintext encrypted aes-gcm using generated key iv iv prepended ciphertext key disposed end transmission reused response client decipherment ciphertext understanding encapsulated data portion susceptible padding oracle attacks virtue based authenticated encryption concerned key encapsulation rsa-oaep susceptible padding oracle attacks use textbook rsa encrypt concatenation key mac better worse rsa-oaep elliptic curve based asymmetric encryption scheme adequate use case thanks paper .ps describes variation dhies provides pkae public key authenticated encryption scheme called shared secret key derived client server key pairs key halved encryption key mac key encrypt mac third party attempt forge requests fail mac verification scheme accepted secure dlp/ec scheme preferable rsa purposes describe sum things based dh dhetm described public key cryptography considered asymmetric encryption -- sender blind content message encryption codesinchaos suggests boxes https //github.com/trevp/noise/wiki/overview nacl-inspired one-way encryption richieframe suggests encrypting block-sized random message forgoing padding symmetric key derived hashing message desired size ec elgamal adequate purpose,rsa elliptic-curves gcm padding-oracle oaep,gcm rsa curves padding elliptic oaep oracle
60,converting finite field elements octet strings,need convert elements finite field gf p^k p odd prime octet strings precise want include elliptic curve points gf p^2 subject public key info x.509 certificate document ieee p1363 fe2osp function usable case know accepted standard describes encoding,reference-request finite-field asn.1,field finite request asn reference
61,changed pkcs v2.2,used de-facto standard real-world use rsa good reasons pkcs thought versatile understandable stable decades remains secure original form contrary standardized uses rsa iso/iec -1 signature scheme withdrawn lack security chosen-message attack first scheme iso/iec 9796-2 lives mild weakness condition major upgrade pkcs v1 v2 circa introduce additional modes stronger security argument multi-prime rsa pkcs updated v2.1 october published february changes include incorporation erratas last updated pkcs v2.1 last updated additional hashes sha-2 family including sha-512/256 sha-224 sha-512/224 corresponding algorithm identifiers corresponding test hex constants availability pdf format permission copy disabled compares test hex constants updated legalese text remains worthless taken form permission copy granted followed condition copier asn module changed pkcs-1v2-2 pkcs-1 changed pkcs-1v2-2 imports .. nist-sha2 section modules sha2 changed hashalgs meaning purposes consequences changes asn module technical changes meaning purposes consequences,rsa standards,rsa standards
62,safe combine system.random secure pseudo-random number generators,look following codesample written c private static byte getrandombytes int size byte buff new byte size // create array crypto-secure random numbers using rngcryptoserviceprovider rng new rngcryptoserviceprovider rng.getbytes buff // gets random byte non-crypto-secure rng xors element // xor element new random number int unsaferand byte _random.next int size i++ buff ^= unsaferand return buff safe combine .net secure random number generators imperfect random number generator example xor,randomness random-number-generator,randomness random number generator
63,cbc based malleable blocks first block,understand answers malleability attacks encryption authentication trying concrete ... please patient want change first block change iv see easy change iv iv xor old_block_0 xor new_block_0 first block change want change second block block_1 understand change block block_0 xor x garble block_0,aes cbc malleability,cbc aes malleability
64,correct way symmetric encryption,want encrypt block text aes time decryption way check symmetric key correct generate randomkey use encrypt text encrypt randomkey hash using user provided key save everything file encryption var userkey var plaintext var randomkey256 generatehexstring var hash256 sha randomkey256 var signature512 concat randomkey256 hash256 var header aes256_encrypt signature512 userkey var cipher aes256_encrypt plaintext randomkey256 var encryptedfile concat header cipher decryption var userkey var encryptedfile //split header|datacipher var header encrypteddata.substring var datacipher encrypteddata.substring null var signature512 aes256_decrypt header userkey //split signature512 randomkey|hash var randomkey256 signature512.substring var hash256 signature512.substring sha randomkey256 ==hash256 //valid key var plaintext aes256_decrypt datacipher randomkey256 //invalid user key real code understand implementing security assuming whole thing encrypted safe environment user key going transmitted stored,aes cryptanalysis keys sha-256,keys sha aes cryptanalysis
65,implicit authentication aritcle,want know logarithm used following system equations paper flexible robust privacy-preserving implicit authentication domingo-ferrer wu blanco-justicia second want understand obtain integer values r^\prime_1 r^\prime_2 ... r^\prime_s using logarithm note values r^\prime r^\prime_0 \forall system integers,authentication,authentication
66,safety dsa key parameters sharing,looking solution use context need able generate new asymmetric key pairs using recognized algorithm ec-dsa applicable sounds dsa adequate solution according documentation generating dsa parameters allows generate large number separate keys pairs requiring step selecting random private key fips 186-3 says intended signatory obtain appropriate domain parameters generating domain parameters obtaining domain parameters entity generated security issue missing reusing domain parameters large number keys domain parameters changed reference possibility use domain parameters certificates issues,public-key cryptanalysis dsa,dsa public key cryptanalysis
67,determining message given cipher-text public key,consider following scenario suppose b set rsa public keys e_a n e_b n n-value happens \gcd e_a e_b suppose c wants send b message coprime n c encrypts using b public keys producing cipher text c_a c_b told instructor suppose someone obtains values c_a c_b particular person determine message using public keys b knowing private keys true help appreciated,encryption rsa public-key,encryption rsa key public
68,uniform distribution/randomness characters sha256 hash,using sha256 algorithm generate number programming projects sha256 hash calculated strings user edit user view edit user view see changed new string hash characters looked determine number combinations letters/numbers appear sha256 hash assigned value following pattern aa=1 ab=2 ac=3 ... fd=84 fe=85 ff=86 ... project number 1-100 needed combinations characters looked right number range found testing generating thousands hashes random inputs php made input md5 uniqid rand multiple times average number 1-100 idea causing number weighted towards combinations dc 51-100 compared aa da 1-49 flawed way determine random number input random player control strings added input described first paragraph note study cryptography explanations intense cryptography jargon useful,cryptanalysis sha-256,sha cryptanalysis
69,modular exponentiation chinese remainder theorem,learning modular exponentiation chinese remainder theorem found great answer use eulers totient chinese remainder theorem modular exponentiation understand last step construction c_p c_q someone explain make n \times \times last step give correct answer last step m^e \bmod pq c_q+q c_p−c_q \bmod p,number-theory prime-numbers modular-arithmetic,prime theory number modular numbers arithmetic
70,die implemented physics engine random,fair die throw random pseudo rng implemented result die throw physics engine say newton havok nvidia physx regarded secure random prng real rng,randomness pseudo-random-generator random-number-generator,randomness random pseudo number generator
71,obtain bit sequences throwing normal dice,throwing normal dice get sequences digits best procedure practice transform sequences bit sequences desired,arithmetic,arithmetic
72,using digital signatures prove identity zero knowledge proof,suppose alice publishes book public key later wants prove wrote book sign challenge messages private key others verify signed messages proving knows private key revealing anything example interactive zero knowledge proof example apply knowledge proofs,zero-knowledge-proofs,proofs knowledge
73,number invertible matrix m*m z_n,‎ ‎‎please help number invertible matrix ‎m*m ‎‎‎ group \mathbb z _n ‎‎‎ assuming know‎ number \mathbb z _p \quad ‎p prime‎‎ ‎ p^ n -1 p^ n -p \cdots p^n-p^ n-1 ‎‎‎‎,hill-cipher,cipher hill
74,i^n=j^n j \in gf \neq j 2^q-1,let j \in gf \neq j j\neq0 possible i^n=j^n n 2^q-1 looking proof answer method find n answer yes,finite-field,field finite
75,chosen ciphertext attack pgp possible,paper pdf jallad et al describe chosen ciphertext attack pgp taking advantage cfb mode block ciphers use pgp devastating attack attack viable pgp made changes,pgp chosen-ciphertext-attack cfb,chosen ciphertext cfb attack pgp
76,convergent encryption integrity authenticity,question convergent encryption suppose use aes-256 cbc mode need bits key bits iv sha-256 hash file use hash key decryption occurs integrity authenticity given checking hash decrypted plaintext need add additionnals integrity authenticity checks cbc-mac,aes cbc cbc-mac convergent-encryption,encryption cbc aes mac convergent
77,sql-like queries cryptdb work,downloaded built cryptdb works queries encrypted database run issue query key word receives error mysql select pptbl -- -- -- -- -- -- -+ id name -- -- -- -- -- -- -+ ali arbab ava azim -- -- -- -- -- -- -+ rows set sec mysql select pptbl name ali error identifier found main/analysis.cc line related encrypted results query select pptbl new query select `pbpcr`.`table_jmvmtsuoxq`.`fetrawcxaqoeq` `pbpcr`.`table_jmvmtsuoxq`.`cdb_saltedyofrhntm` `pbpcr`.`table_jmvmtsuoxq`.`lgdqmzolraoeq` `pbpcr`.`table_jmvmtsuoxq` encrypted results -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |fetrawcxaqoeq |cdb_saltedyofrhntm |lgdqmzolraoeq -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |6564397473536819806 |13839409992861282053| q0 o~ rqw c6 |4201181374583641407 |5838989347444454725 ur ^9 v s_5 ^| |1649188046741762720 |9525321359430614429 l w| f c |16881031136507617701|7294557497133907357 |p r e` e ~| -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- result following query mysql set cryptdb='show -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- _database _table _field _onion _level id -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- pbpcr pptbl id rnd pbpcr pptbl id oorder rnd pbpcr pptbl id hom pbpcr pptbl name det pbpcr pptbl name oorder rnd -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- rows set sec,encryption homomorphic-encryption database cryptdb,encryption homomorphic cryptdb database
78,sign characters string,document given signed private key ideas sign document id using rsa private key print following document encrypt privatekey id id requirenments fullfilled id encrypt privatekey id safe safe publish plaintext encryption choosing paintext safe cryptography method allow minimize encrypt privatekey id string special case attacker limited amount trials 1-2 fake signature legal attacker provide valid signature second trial identified cheater public key public think symmetric encryption better limitation asymmetric encryption exists due compatibility reasons example id privatekey ... encrypt privatekey id,rsa signature,rsa signature
79,aes parity key-dependent,parity permutation set defined aes encryption certain fixed key dependent key des pure feistel parity key less clear aes practical importance parity arbitrary permutation determined -2 correspondences known infeasible concern context comment considering reduced aes variant,aes permutation pseudo-random-permutation,aes random pseudo permutation
80,simplified key wrapping achieve confidentiality,looking help understanding algorithm described deliver adequate protection confidentiality care criteria authenticity integrity words want make sure key material secret given key k l bits hashing algorithm h produces l bit digest password p least n bits smaller l generated l bit salt produce l bit wrapped key w \begin align w h s||p k \text wrap \\ k h s||p w \text unwrap \end align w'=w k'=k transmission tampered nb care know authenticated encryption better time hashing tool falling prey fearsome birthday attack appears related question asked ambitious answer clear hash based encryption simple compare aes update apr goal help eliminate confusion amplify answer reading malleability refers relatedness ciphertexts vis vis dolev dwork know certain number bits ciphertext need inverted recover key certain bits need inverted reducing search space relationship malleability chosen-ciphertext attacks known fwiw aes available reason consider anything established key wrapping algorithms nist aes keywrap summarize intention using hash function proposed construction build reversible transformation non-reversible function malleability introduced number iterations hash slow pace brute-force search compensate fundamental weakness many thanks,encryption hash key-wrap,wrap encryption hash key
81,generate bit hmac,given plaintext respective authentication tag generated hmac-md5 |tag| bits application constrained send bits ok xor bytes second bytes tag order generate total bit tag believe strengthen key size output size somebody brute force worse happen different inputs signature weaken strengthen way,hmac attack,attack hmac
82,bps used single integer restrict output certain range,specifications document natural restriction least characters ciphered i.e b \geq character represented integer certain cardinality integer array minimum say want encrypt single input integer restrict certain range example say cardinality integer range possible values done using bps i.e acceptable input integer array size algorithm cardinality range want trying encrypt year way result year greater current year,format-preserving,preserving format
83,knowing common prefixes help crack blowfish,strings form static data changing data beginning static data part characters common strings last part characters different string string encrypted using blowfish xjava.security.cipher fixed initialization vector fixed key fact beginning data unchanging used effective exploit help break encryption edit updated use correct terminology add little information,encryption,encryption
84,using counters mac cbc mode,wondering implications using session counter appended end plaintext use cipher cbc mode encrypt vs. adding hmac form keyed mac detect messasge tampering aware mac i.e hmac designed detect message tampering appends additional tag data working constrained bandwidth embedded platforms likelihood appending session end plaintext message serving replay attack prevention message tampering detection able detect attempts replay ciphered message assuming cryptographic keys secure guessing hmac mac codes deployed due constraint cryptographic functions working normal cpus efficient use mac detect tampering spending cpu cycles decrypting tampered message modern era surplus cpu power stuff hardware crypto accelerators intel aes-ni relevant mac codes compared appending randomized session counters end plaintext message serve dual purpose replay prevention detection,mac cbc,cbc mac
85,algorithm accepting passphrase fool unlegit user,looking specific names literature crypto algorithms passphrase input user order false passphrase present unlegit user false plaintext unlegit user able determine text real fake accepts passphrase course using legit passphrase reveals legit plaintext found examples mean fraunhofer institut germany invented smartphone password-manager app uses kind technology called imobilesitter think eurocrypt2014 paper called encryption similar algorithm submitted,algorithm-design deniable-encryption plausible-deniability,algorithm encryption deniable plausible deniability design
86,problem des using ofb mode generalized feistel ciphers,problem using des cipher ofb mode eg feedback goes next round encrypted key k resulting plaintext iv used round goes done output block cipher deterministic repetitive know using feistel cipher nice property running reverse ordening subkeys results plaintext ok say problem using des ofb mode true feistel ciphers reason des problem ofb something different thanks clear response edit initial assumption wrong problem encryption something des result using weak key feistel structure sorry sure des encrypt something weak key get original plaintext using des ofb mode weak key result information leakage,des ofb feistel-network,ofb feistel des network
87,find value vector modulo basis lattice-based cryptography,gentry paper homomorphic encryption using ideal lattices finds values vectors modulo certain basis instance \psi \leftarrow \psi \mod b taken page gentry thesis mean evaluate vector modulo basis,homomorphic-encryption lattice-crypto,encryption homomorphic crypto lattice
88,feasible break encrypted encoded message,message sent person plain message encrypted weak algorithm say des encrypted message encoded simple substitution private remains conversation feasible external attacker decrypt message knowing encrypted message process i.e unknown encryption unknown substitution remain conversation substitution algorithm encryption key algorithms use private known sender receiver substituted text longer non-substituted guess frequency analysis applied encryption simple substitution makes infeasible decrypt text provided map knowing encoded remains unknown,symmetric provable-security,symmetric provable security
89,signing hash full data considered secure,reference object code hashes signature object separate signing obvious reason consider simpler sign reference object hash wonder considered secure complete explanation data object hash signed h hash reference signature object contain h sign h sent network verified signature,signature,signature
90,files encrypted related data versus file,code takes list credit-card numbers splits number chunks chunk characters long chunk remainder series chunks saved individual files example test data looks test cc numbers file x contain file contain record separated common delimiter newline character file x saved truecrypt volume using aes file saved different truecrypt volume using using unrelated key question lower cryptographic strength due structure reason bring know contents file make assertions contents second due credit-card numbers adhering luhn-10 mod10 specifications example know file x contents know corresponding record file pass luhn-10 check knowing file x exposes information file potential value reduced factor off-topic storing single file full credit card numbers separated common delimiter expose information attacker knows structure file,aes,aes
91,special elliptic curves,seems sources introductions discuss elliptic curves general used know particular curves important cryptography opposed let say polynomial degree \gt mod group seems modulus applied function types acceptable seems less intuitive looking bubble vs curve curves let say anything sin wave x^3 x shaped contour job seems provide much surface area get larger space \mathbb z _p possible combinations connecting lines arbitrary p q get r opposed something restrictive graph beginning bubble seem reduce possible combinations use modulus implement discrete logarithm problem sorry seems little naive question trying write implementation understand means asking something taken granted walking simple example ones searched anything sentences helpful wants talk b way e listen b edit seems version elliptic curves finite field looks pretty random seeing equations cryptographic significance difficult imagine took higher degree equation applied modulus place group seems make sense get something random,elliptic-curves discrete-logarithm finite-field,logarithm field curves discrete elliptic finite
92,happens someone implements tree-base signature scheme,learning signature schemes read merkele tree-base signature scheme paragraphs key signings generated using so-called tree structure pseudo randomness algorithms question happens scheme breaks signature scheme someone using signing key-generation normal way i.e probabilistic algorithms,signature hash-tree,tree hash signature
93,requiring reciprocal signatures create stronger web trust,post cryptome noted person called michael vario signing people public key uploading signatures forging web trust sure kind thing done occurred public key servers asked return public keys signatures reciprocal realistic picture trusts feature enabled vario signatures appear keys signed effort key server feature useful need additional options/messages gnupg make clear looking unauthenticated signature,pgp,pgp
94,considerations using single long-term key file encryption,thinking designing container file format allows store file say thumbnail metadata files confidential encrypted goal achieve confidentiality authenticity integrity file containers millions containers single long-term secret i.e master key file suppose looking aead ad file header e.g. aes-256-cbc hmac-sha256 aes-256-gcm issue held iv/nonce single long-term secret design understand ensure uniqueness iv/nonce container methods mentioned sufficient use simple sequence number container place authenticated file header split iv/nonce fixed sequential part mentioned rfc5116 different approach thinking using hkdf derive key material container master secret guid associated file container store guid plain file header use guid iv/nonce benefit creating individual key material container update individual keys container seem way go using master secret encrypt container key solve iv problem please take look following proposal file header h plaintext\ file\ header g guid\ associated\ with\ the\ payload\ included\ in\ h payload p plaintext c ciphertext iv_p payload\ iv k_p payload\ key c aes iv_p k_p p user keys macs s_i a\ secret\ stored\ in\ a\ file iv_i iv\ for\ slot\ k_i key\ for\ slot\ k_ m_i hmac\ secret\ for\ slot\ m_i hmac\ for\ slot\ k_ p_i payload\ key\ material\ encrypted\ with\ k_i iv_i k_i k_ m_i hkdf g s_i k_ p_i aes iv_i k_i iv_p\ ||\ k_p m_i hmac k_ m_i h\ ||\ c\ ||\ k_ p_i container file format h\ ||\ c\ ||\ k_ p_i m_i design use hkdf derive much key material keyfile need solving iv problem add remove many user keys want detect tampering hmac associated key need store hash container key luks hmac guarantees integrity decrypted key consider sound design,file-encryption key-reuse file-format,encryption format key file reuse
95,numeric base conversion cryptosystems,wondering numeric base conversion found application cryptography base conversion example familiar base64 encoding example numeric base conversion value converted base ascii base64 base-64 encoding curious case set symbols converted set symbols converted permutation elements bases kept secret gathered differences encoding encryption seems latter involves secret material former able research base conversion secret bases constitute proper encryption starters possesses low diffusion vulnerable basic known-plaintext attacks incrementing counter converting ascii secret base yield bytes secret base potential countermeasure encrypt plaintext data encrypted appear little gained secret encoding business interesting feature values arbitrary bases math performed converted property called homomorphic encryption label sure confidence message maintained tricks required countermeasure last point ruin property played concept able think solid use case idea questioning use case exists least crypto concerned curious crypto systems failed attempted make use encoding values secret base curious applications idea cryptography mentioned able find mention things bunch pages stressing encoding encryption emphasizing difference secret data page closest thing looking found disagree certain assertions contained page fair author notice page years old looked interesting goes single page overview clarification base conversion encoding referring changing meaning symbols given number system opposed changing value represented example values range 0-255 represented symbols/glyphs ... actual value string symbols depends upon encoding number system used represent means bases symbol base example choose interpret glyph mean number 0-255. interpret glyph mean number 0-255 exclusive value indicated assigned indicates numeric bases glyph process looks value_in_base2 convert value_in_base1 base1 base2 value_in_base1 ordered collection symbols whose elements included base1 value2 ordered collection symbols whose elements included base2 note required base1 contain symbols used original value required contain symbols used original value clarify example convert ascii string ascii binary trying convert ascii string binary ascii work string contains symbols found binary translated concrete examples convert binary base_ten convert binary hexadecimal convert binary inverted_binary secret_message convert message secret_ascii secret_base example converts binary base ten make perfect sense next example converts binary hexadecimal standard fare third example converts regular binary inverted binary value represented symbol value represented symbol last example converts message value secret number base second secret number base values output depend bases used conversion process secret_message presented using symbols available ascii character set recovery non secret message impossible knowledge bases used encoding process conversion from/to bases outputs valid string encoded bases match appropriate symbols box thinking given graph numbers plaintext encryption shift points graph order scramble form encoding closer leaving points graph rearranging order numbers sides graph x-y axis labeled ... choose keep order numbers axis secret,encryption encoding,encryption encoding
96,rsa pkcs v1.5 padding output,make use rsa pkcs v1.5 padding length used allowed plaintext bigger modulus length bits padding modulus size value bigger modulus avoid,rsa,rsa
97,question key rc4,planning develop secure version rc4 algorithm i´m encryption expert i´ld help find answers following questions value key array range 0-255 answer “yes” please explain use generate key key array defined array rc4 output j mod n,encryption algorithm-design stream-cipher rc4,algorithm stream rc4 encryption cipher design
98,distribution subset md5,need assign bit integer collection human readable strings generated hash collision mind expect thousand strings like evaluate possibility using first bits md5 sum distribution bits,hash md5,hash md5
99,sign data encrypted using public key rsa,received public key encrypt data end decrypt using private key want sign data ensure non-repudiation thought sign using private key possession sign encrypted data,rsa public-key signature certificates,certificates signature rsa key public
100,key schedule serpent circle,creation prekeys serpent works xoring previous values counter fixed value word bits big words form round key applying s-box part question original raw key bit w_ -8 w_ -1 \phi constant term value hex equals left rotation xoring individual bit equation value w_i i-8 \oplus w_ i-5 \oplus w_ i-3 \oplus w_ i-1 \oplus \phi creators serpent mention bases primitive polynomial x^8 x^7 x^5 x^3 …to ensure distribution key bits rounds eliminate weak keys related keys source http //asmaes.sourceforge.net/serpent/serpentspecification.pdf question equation form cycle possible values asking linear feedback shift register primitive polynomial feature possible value excluding bits set reached starts first value answer “yes” feature hold constant terms given \phi answer ”no” remove constant term \phi and/or applied round counter equation,algorithm-design serpent key-schedule,key design serpent algorithm schedule
101,verilog simulation synthesis diffie-hellman key exchange,available verilog implementaion diffie-hellman key exchange find anything using google assuming started implementing code hosted https //github.com/nulpoet/verilog_diffiehellman behavioral simulation xilinx works synthesize remainder operator anybody know design module remainder operation verilog computes remainder single clock cycle links literature discussing algorithm suffice solution question solve problem thanks advance,protocol-design implementation diffie-hellman algorithm-design key-exchange,hellman algorithm exchange implementation design key diffie protocol
102,preferred xnor,xor operator seems used building block many cryptographic primitives see desirable properties seem bits b=c information preserved b recovered c bit information hidden adversary learn anything b c properties xnor seems cryptographic application using xor constructed xnor incurring loss security possible reason prefer xor xor equivalent addition modulo whereas xnor addition modulo seems mathematical sure results additional hardware complexity practice choice xor arbitrary made historical reasons tangible underlying motivation using xnor,xor,xor
103,complexity square attack reduced 4-rounds 128-bit rijndael variant,looking square attack reduced version aes-128 rounds block key size bit set plaintext-ciphertext block pairs complexity computations number encryptions partial encryptions memory usage data requested,cryptanalysis aes rijndael,rijndael aes cryptanalysis
104,encode algorithm garbling scheme probabilistic deterministic,general garbling scheme works follows \textrm garb c input security parameter \lambda unary circuit c outputs garbled circuit c garbling key k \textrm encode x k input input value x garbling key k outputs garbled input x \textrm eval \widehat c x outputs result c x question second algorithm encode probabilistic reviewed papers indicate deterministic think probabilistic confusion please give best illustration probabilistic deterministic,randomness garbled-circuits,garbled circuits randomness
105,ecc point addition/point multiplication,beginner-esque knowledge ecdsa trying write something python take private key output public key understand trying point multiplication k number times basepoint get better understanding main resources wikipedia page tutorial trying program point addition work calculate lambda wikipedia point addition slope happens get numbers divide fraction example found tutorial second resource curve b \mathbb f_ point doubling p= gives \lambda \mod simplifies \lambda \mod happens turn,elliptic-curves number-theory modular-arithmetic,theory number curves modular elliptic arithmetic
106,crack sha1 hash code,given set sha1 hash code knew portion plaintext particular hash code remaining portion plaintext constant value hash code possible recover constant value,hash sha-1,sha hash
107,possible perform mpc protocol compute product polynomial ring,hope asking much n parties holding polynomial 0-1 coefficients fixed degree n-1 wandering possible mean feasible compute product polynomials mpc protocol security need result modulo x^n+1 actual request following given n polynomials p_1 p_2 \dots p_n 0-1 coefficients degree n-1 compute \prod p_i \mod x^n+1 multiparty computation protocol party holds p_i question regards complexity product n \log n\log integer multiplications fft algorithm used first question please attach welcome message answer,multiparty-computation,computation multiparty
108,encryption bigrams trigrams weaken code,supposing rotor machine characters encryption ten additional characters frequent bigrams trigrams weaken code better use additional characters,cryptanalysis classical-cipher,cipher classical cryptanalysis
109,hmac_drbg generate process requesting n bytes different requesting n bytes total,correct assuming hmac_drbg return different results e.g first request bytes followed request bytes asking bytes seems nist sp800-90a chapter generating pseudorandom bits using hmac_drbg k v values changed requested number bits generated changing v k v values changed leftover bits get chucked strange property drng return different value drng || drng drng drng reseeded drng kind property,hmac pseudo-random-generator random-number-generator,random pseudo hmac generator number
110,davies-meyer miyaguchi-preneel constructions secure,davies-meyer compression function h h e_m h h said secure miyaguchi-preneel compression function h h e_m h \oplus h secure know secure e block cipher n -bit key n -bit plaintext e_k x denotes encryption x key k question based asked yanglifu90,hash block-cipher,cipher hash block
111,decode message p q p \bmod n \bmod n n known,going cryptography exercises stumbled problem discover message know p q p \bmod n q \bmod n known numbers lost know start anyone give hints point right direction read problem,encryption modular-arithmetic,encryption arithmetic modular
112,proof perfect privacy implies number keys least number messages,reading proof statement perfect privacy implies |k| |m| pretty sure k set keys set messages proof following understand notation assume i.e. assume fewer keys messages given ciphertext c message key k e k c p_ k \in k e k c let p_c \in e k c k k maps message c fewer keys messages p_c key k maps c p_ k \in k e k c violates perfect-secrecy condition p_ k \in k e k c p_ k \in k e_k k c k \in k means k key set k first thing understand following notation p_ k \in k e k c mean p refer probability understood following statement k maps message c makes sense function output result inputs p_ k \in k e k c mean probability encrypt using k results cipher c equal said proof message key k transforms c yes convinced violates perfect-secrecy condition p_ k \in k e k c p_ k \in k e_k k c assumed beginning p_ k \in k e k c statement makes sense get part assuming p_ k \in k e k c apart fact sure p p i.e typo p p refer probabilities wondering think proof showing case number keys greater messages,encryption provable-security perfect-secrecy,perfect encryption security secrecy provable
113,version srp iso/iec 11770-4:2006,impression srp emerges least uncommon analyzed protocol authentication key agreement based short password states srp part iec 11770-4 protocols version specified seen srp-1 srp-2 srp-3 srp-6 current srp-6a hence first question version srp iso/iec 11770-4:2006 link free preview drafts available willing subscribe mailing list spot meaningful technical difference october draft real thing list parameters options srp or/and iso/iec necessary define implementations point secure inter-operable iso/iec 11770-4:2006 use elliptic curve setting guess shorter cryptograms case srp update motivation question iso/iec 11770-4 international standard approved committee reassuring decision-maker srp-6a defined web page disappear change second comment smit johnth suggested tls-srp/rfc traction possible choice reading implementing srp-6a claiming implement srp-6 reference documents predating srp-6a main reservations tls heavy application rfc stuck sha-1 bad certification standpoint france hash bits bits use year match rules section official recommendations least make prescriber less comfortable,passwords srp standards,srp passwords standards
114,pairing based cryptography ready productive use,testing many interesting cryptographic protocols based bilinear maps hard understand underlying fundamentals several types pairing different underlying algorithms weil tate ate subtypes understand properties started ben lynn implementation pairing based cryptosystems old distinguishes type a-g curves notes type3 curves susceptible certain discrete log attacks hand galbraith talks death type pairings new blog entry states type pairings efficient type used ben lynn seemed little preference type pairing pairings mentioned lynn seen als secure productive use seen secure others ate-pairing seems fast,elliptic-curves pairings,curves elliptic pairings
115,encryption verification message,want send/receive messages peer using tcp socket want encrypt messages using aes cbc know symmetric key k1 used cbc k2 used hmac size message small bytes low latency needed verification message needed want verify messages encrypted a. idea calculate hmac message example messages m1 hmac m1 m2 hmac m2 ... send aes_cbc messages receiver decyprt messages checks sent hmac m1 hmac sent m1 idea pad bits example messages m1 z1 m2 z2 ... send aes_cbc messages receiver decrypt messages check z1 question idea secure assumed length bits example put hmac zeros break verification probability larger sorry poor english thank,aes hmac,aes hmac
116,stripping message authentication signature,attackers strip rsa ec -dsa digital signature conduct cca aes-ctr cbc payload aes-gcm,rsa aes elliptic-curves dsa chosen-ciphertext-attack,aes chosen rsa curves attack elliptic ciphertext dsa
117,hash function based pseudorandom functions security,hash functions make use pseudorandom functions looking specification hash function based prf based security primitive,hash provable-security pseudo-random-function,function hash random pseudo provable security
118,validating successful decryption aes,program uses aes-256 cbc mode encrypt decrypt files realized use incorrect passphrase decrypt data leaves way validate passphrase correct decrypting things idea suggested embed known value beginning encrypted data validate decryption produced expected result iv known value thought hashing embedding first bytes file first block decrypted bytes equal hash iv know decryption succeeded know failed way compromise encrypted files,aes initialization-vector cbc,cbc aes vector initialization
119,username password work,suppose client alice goes https bob tls alice sends client hello random number r_a bob sends server hello random number r_b suppose settle cipher suite e.g rsa dhe aes sha1 bob sends server certificate bob signs sends key exchange g^b diffie-hellman bob request client certificate client alice sends client key exchange g^a diffie hellman signing share pre-master secret g^ ab r_a r_b next key derivation use pseudorandom function prf generate pre-master secret following symmetric keys client write key write key client mac key server mac key client write iv use client cipher server write iv use server cipher alice sends change cipher spec encrypted finished containing previous client handshake messages bob sends change encrypted finished containing previous server handshake messages exchange encrypted application data suppose alice starts signing username password happen next scrap negotiated keys switch tls-psk password-authenticated key agreement password-based key derivation please describe client server use username password steps algorithms used,passwords tls password-based-encryption,tls encryption password passwords based
120,multiple homomorphic operations ciphertext leaks information plaintext,scenario assume encrypt message using paillier encryption get c=e give identical c different parties parties e party computes c_ e h_1 =e \cdot h_1 party e computes c_ e e h_2 =e \cdot h_2 values c c_ c_ e given malicious server question server learn anything values h_1 h_2 yes/no remark seems learn anything messages given c homomorphic operation get ciphertexts c_ c_ e homomorphic encryptions secure problem changed random value r encryption ciphetexts possess identical random value remark mentioned paillier using right question generalized homomorphic encryptions,encryption cryptanalysis homomorphic-encryption paillier,encryption paillier homomorphic cryptanalysis
121,additive proof discrete log,let say someone k want prove know k k k*g g sort group element use schnorr signature protocol mergable proofs kind given proof k_1 k_2 get proof k k_1 k_2 note know k_1 k_2 seen proofs note proof much weaker course proving know k proving seen proofs k_x add k take \mathcal space number k_x corollary number k_x secret otherwise proof easy list proofs k_x \mathcal \log x acceptable open problem mimble wimble white paper edit nice property proof k finding proof -k hard,group-theory schnorr-signature,schnorr group theory signature
122,recovering public key ecdsa signature work,possible recover public key ecdsa signature r please explain works,elliptic-curves dsa,curves elliptic dsa
123,possible ec private keys valid,generate key pair using openssl bouncy castle using curve secp256k1 private keys look random values private key corresponding public key public key found arbitrary values treated private keys way tell value private key,elliptic-curves,curves elliptic
124,speeding known plaintext preimage recovery attack md5,suppose messages b c different length dwords length combined know plaintext length c length b. possible take advantage knowledge trying recover preimage md5 || b || c targeting raw md5 transform c fact padding bitlength feed dwords input expect get dwords digest dwords length b c dwords length think precomputing much possible long message used give much speedup metacompilation techniques upd1 following idea unsure value context general appreciate review possible express dword collection independent bits states set unset upset unknown unknown bits unique id hold creation history result xoring unknown bits unknown spawn unique unknown bits necessary possible unknown bit determined anding oring outcome longer unknown xoring make xoring unknown bit inverted counterpart make rotation effect bits order dword collection bitwise operations dwords scale bits obvious manner addition expressed add operation returns result carry bit turn ignored result msb tracing end directed graph unknown input bits message b output bits digest twisted entangled input bits node graph operation xor nand add etc incoming edges arguments functions outgoing edges results symmetrical transitive binary operations extended arbitrary arity using behavioral definition arguments set result set result xoring unknown argument bits xoring known bits produces xor idea try simplify graph using rules expressed much possible unwind bit history revealing long expression and/or/xors making use initial unknown bits b message try find common chains operations computed problem approach overcomplexify calculations times dwords breaked bits ... way somehow bond producing function taking b message candidate returning single dword compact way know know use approach dwords bits lowest level second idea try reverse graph feeding desired md5 output output unknown bits trying figure arguments produce results example b c ... == x x unknown bit revealed impossible b c others anything propagation proceed applies b c ... == x x set b c set ambigous cases branching pushing current graph state stack selecting possible argument layouts proceeding first conflict e.g example according expression unknown bit unset according expression bit set means possible paths selected wrong next tried implemented something wrong wrong think figure time needed walking branches exceed bruteforce time sure,md5 preimage-resistance,preimage resistance md5
125,make longer hashes,reading thing sha-1024 hash sha-2 built state word sizes meet security requirements commodity computers x86 alpha use 64-bit maximum cpu word sizes general purpose registers meant state built 8-words meet common security requirements support larger digest either require core compression function different need word inputs larger word size exist specialized processors simd registers appropriate instructions sha-512 sha-256 reused create longer hash eg concatenating hash string hash string pose security concern speaking hashes general little knowledge internals hashing algorithms think takes average time find collision hash string take average time t^2 find collision hash string concat hash string,hash,hash
126,injecting salt pycrypto kdf useful,noted sources indicate using kdf pbkdf2 advocate injecting salt time execution dv salt pbkdf2 salt password salt versus plain usage dv pbkdf2 password salt using pycrypto.protocol.kdf pbkdf2 function ronacher version linked extra salt parameters add benefit passwords salt stored password risk oracle identical passwords revealed as-such encoded case concern mindful concern expect absence fault algorithms permits short-circuiting used salt obliges recheck password entire number iterations case copied post closed edit worth linking store salt hash passwords password hashing add salt pepper salt enough last link particular states question know recommended/approved method storing password verifiers store verifier salt hash salt password sense question becomes necessary inject salt kdf way recommended hash presuming course theory supports injection salt hash believe,salt pbkdf-2,pbkdf salt
127,comprehensive alternatives rsa,wished comprehensive alternative rsa say comprehensive wonder encryption digital signature rsa alternatives,encryption rsa public-key,encryption rsa key public
128,choose padding mode aes,depending framework using various padding modes used aes encryption example .net choose pkcs7 iso10126 ansix923 zeros none understand encryptor decryptor need use mode interoperable considerations choosing padding mode exception matter considered secure others,encryption block-cipher symmetric padding,symmetric encryption cipher padding block
129,changing plaintext encryption rsa,rsa crypto scheme message x plaintext encrypted produce ciphertext computing x^e \bmod n course means x numeric value work assuming found tables ascii plaintext x single character message larger parts encrypted examples seen expanded x given small numeric value exampes interested understand x practise,rsa,rsa
130,requested encrypt data aes256 digital certification timestamped,job tasked gov encrypt data send law says title need aes256 thing data important point change mind enforce full specs crypto wanted ask clarifications ideas learned timestamping digital certification assuming ssl things buy verizon certify claim create ssl certificate apache gather rsa aes raw data timestamping timestamped data aes256 enc tstamp data rsa private key result send gov gov receives result uses rsa public key aes timestamp check thing certificate supposed online something public key public gov learn fine aes read symmetric agree password secret right give password use request point timestamp require agree going timestamp data send knew public key use decoding timestamp salts add data passwords sure add gov assume end trouble secret aes passwords going leaked point someone gov future unknown company used harm company/me forging fake data trying think paranoid end salting everything whenever done correct encryption pipeline salt append data decryption pipeline add salt append data append timestamper,encryption rsa aes timestamping,encryption aes timestamping rsa
131,hash decrypts key key decrypts cipher ...,noticed couple pieces encryption software truecrypt use hash password key block cipher generate random key use encrypt data xor key hash password store result encrypted file header see useful perspective wanting different keys different files password think reason hashes weak block cipher keys missing something additional security considerations think kind mechanism mechanism superior using keyed hmac hashes file contains key,encryption hash passwords keys file-encryption,keys encryption passwords hash file
132,pseudocode constant time modular exponentiation,looking implement modular exponentiation rsa constant time examples found mathematical descriptions operations references descriptions psuedo-code understandable implementable someone much math background,rsa implementation reference-request modular-arithmetic,reference implementation request rsa modular arithmetic
133,expect find collision hash function \sqrt n hashes,get intuitive understanding \frac n number bits key consists,hash collision-resistance birthday-attack,collision attack birthday hash resistance
134,matsui linear attack des p box,trying understand matsui linear attack des something understand paper paper say =12 ok say x f_5 x k =k problem indices come supposed output bits s5 p box bits take p box wikipedia true,linear-cryptanalysis,linear cryptanalysis
135,purpose expanding shrinking sha-1,purpose expanding shrinking sha-1 serves security purposes,hash cryptanalysis sha-1,sha hash cryptanalysis
136,proof counter mode operation cbc mode cpa secure pseudorandom permutations,know counter mode cpa secure used block ciphers modeled random permutations use pseudo-random permutations cpa secure proof cbc mode used block ciphers modeled pseudo-random permutations cpa secure proof,cbc,cbc
137,happens entropy hashing,happens entropy hashing suppose key entropy k entropy k increased hashing key,hash entropy,entropy hash
138,guarantee plaintext coprime rsa,specifications rsa state p^ \phi n \equiv ~mod~n p n coprime p plaintext n product suitable primes x_1 x_2 question guarantee p plaintext coprime n thank advance,encryption rsa public-key cryptanalysis,encryption cryptanalysis rsa key public
139,creating spn cipher chacha20 salsa20 double round function,given chacha20 building blocks used construct hash function double round function chacha20 salsa20 used construct secure sp-network cipher double round function serves permutation function 512-bit round keys xored permuted result round f \rightarrow double round function g \rightarrow inverse f r rk x =f x \oplus rk single encryption round rk =g \oplus rk single decryption round,symmetric salsa20 chacha,symmetric chacha salsa20
140,hmac sha256 vs rsa sha256 use,salesforce announced moving hmac sha256 rsa sha256 make move technical factors hmac easy break https //login.salesforce.com/help/pdfs/en/salesforce_summer13_release_notes.pdf ps security expert,rsa hmac,rsa hmac
141,basic encryption decryption related question,started studying cryptography got interested subject got doubt studying encryption scheme encrypt message change ciphertext ciphertext available attacker attacker modifies ciphertext sends receiver decrypt message right..,encryption,encryption
142,reusing pgp key generating ssl certificate authority,make sense reuse keys pgp gnupg gpg keyblock generating ssl certificate authority toy web services mine ideal world people keypair trustworthy hardware device use certify everything e.g ssl certificate authority opposed generating rsa key openssl advised online tutorial possible benefits know afaiu different story,pgp certificates openssl,certificates openssl pgp
143,dual_ec_drbg openssl mac,much info related anyone know default csprng dual_ec_drbg wiki clear… related first question anyone experience openssl mac changing default csprng,openssl dual-ec-drbg,ec drbg openssl dual
144,output linear shift register given plaintext intial state,given initial state s_0 plaintext p need find ciphertext method solve taught coursework information found online seem anyone explain steps needed solve,random-number-generator stream-cipher,stream cipher random number generator
145,flaw ecc signature scheme,found following work internet ecc-based blind signature scheme paper claims ecdsa blind signature seems scheme flaw process describe standard requester blinds message using key sends blinded message signer signer signs message resulting pair r sent requester requester unblinds component r component published unchanged seems logical publishing r way came allow signer track transactions keeping database issued r tokens missing something,elliptic-curves blind-signature digital-cash,digital cash curves elliptic signature
146,ok use hash key nonce aes gcm,see immediate risk using hash key nonce aes gcm something overlooking,aes nonce,nonce aes
147,tag length used eax mac,eax flexible regard length calculated call tag mac value eax paper well documentations avoid suggesting value length mac anything take consideration setting value length proportional collision resistance subtle consequences depending mac length,modes-of-operation mac authenticated-encryption collision-resistance eax,authenticated modes eax encryption resistance collision operation
148,randomize encrypted data hide data source,small amount data typ byte channel eavesdropped time behaviour way data changes protected encrypt using xor bytes key c x k means c m. observing interesting decrypt actual data cipher reveals enough information data source observing data encrypted ... ... look t=0 t=1 t=2 t=3 ... t=0 t=1 t=2 t=3 data lineary increases variable increment long time period changes fixed average value change long period time guessable much effort clear data little change randomized encryption constraints security obscurity algorithm known data broadcasted source updated defined interval time period eavesdropper see data get read peer receiver/reader miss message update able sync message loss acceptable receiver peers rely stable tamper-free timebase cpu power memory requirement limited data behaviour seen unconfidential see option suitable broadcasting active read combine data pseudo random factor derived confidential iv known sides combination encrypted using confidential key look mins update interval e.g mins unconfidential k key confidential iv lfsr seed confidential r initial rounds unconfidential r lfsr round counter n iv pseudo noise lfsr def hide lfsr n return x def enc return x k initialize r r n lfsr n r r true r r read_four_byte_message feed broadcasting store retrieval enc hide r sleep clear eavesdropper brute force probe ivs cycled r times lfsr xor cipher know message change update intervals questions missed attacking vectors anything improve security increasing iv key lengths please guide basics learn,randomness,randomness
149,aes secure key generation storage,client-server application transferring data components secure way use aes algorithm cbc mode transfer data file scenario client ask data file plaintext server takes request encrypt data iv/key pair sends encrypted data client client stores data encrypted client user application reason client open files read data offline mode server application .net based client delphi need secret key generation mechanism secure changeable client server something related current user etc experienced cryptography waiting experienced advices thanks advance edit try explain problem details client application opening files format say files downloaded database server authenticated user download files authenticated user download files copied computers disks files contain worked models say models need encrypted case client sqlite database need updated send scripts client encrypted way client decrypts executes saves values encrypted work asked question proper way key generation mean create mechanism exchange data key storage mechnaism creates key runtime sides using userids licence keys etc ... user information client server hope explain,aes,aes
150,user-specified pbkdf2 password salt iterations limits,decentralized login user left select password salt iterations minimums enforced words none stored implementation standard login authentication guidelines 4-digit pin enforced produce uncrackable combinations login username password substituted pbkdf2 password salt vice versa pin number iterations less pbkdf2 scheme tool user generate 32-byte signing keys user memory storage conforming key course accepted overall implementation use tool help save standard username/password rules implemented minimums measure length quantity and/or variety special characters placed pbkdf2 password/salt combination,keys pbkdf-2,keys pbkdf
151,use cribs,looking incorporate crib usage breaking ciphers unknown enciphering schemes least gleam information seems big hurdle looking references incorporating cribs decryption schemes allow clarify crib mean word set words suspect message example suppose suspect word parachute words enciphered question good question try give weight literature read big gap elementary cryptanalysis modern cryptanalysis feel modern cryptanalysis focuses big-power public-key schemes easy hard break middle many schemes wwii pacific forces broke japanese naval encryption learned many different classical encryption decryption techniques unfamiliar approach getting information set messages based fact words appear message sort basic idea went years military intelligence read relied cribs occasion giving certain pieces information japanese diplomats messages contain known words mean alienate demonize japan us-japan relations happens big example suspect many read codebreakers beginning book suspect many familiar idea end ask anyone refer references use cribs extract information unknown scheme helen gaines book cryptanalysis uses many cribs book underlying idea scheme known course case final note aspect paulo marques answer deleted find deeply troubling say schemes built strong knows scheme mean scheme strong information gotten scheme schemes strong attempt break anything know case recent meta post paulo ebermann asserted belief se limit modern cryptography minority please let know search,cryptanalysis reference-request,request reference cryptanalysis
152,random value element picked \frac p-1 \frac p-1 ^2 probability,let \mathbb f _p finite field p large prime number e.g 256-bit know probability element picked field p-1 say element picked uniformly random question security context say element uniformly probability \frac p-1 \frac p-1 ^2,cryptanalysis provable-security,provable security cryptanalysis
153,encrypted sdcard readable/decryptable desktop machine,sdcard android phone using built-in encryption software phone dies reason able using pin/password access data desktops os x windows linux,encryption,encryption
154,file random access,programmer familiar c/c++ python got assignment team asking work projects need make small program encrypt large file using symmetric key encryption achieve using aes128 aes256 crt mode catch small part file given location bytes beginning file able decrypt piece thought cutting file multiple pieces applying separate generated key issue regarding said part size cut like know lapping blocks handle idea working slicing bytes calculate number bytes last slice get bytes generate random padding bytes beginning decrypt remove bytes case multiple slices overlap split method repeated like know sensible better cipher algorithm allows ps files image files document files know basics cryptography,aes reference-request modes-of-operation file-encryption,aes modes reference encryption request file operation
155,constructing secure key exchange protocol,\pi= gen enc dec let secure public-key encryption scheme security parameter n message space plaintext \lbrace \rbrace^n using \pi want construct key exchange protocol \theta rounds i.e alice bob secure eavesdroppers possible prove course assumption security \pi example diffie–hellman key exchange protocol fits exercise somethink know generalize p.s key alice bob establish \in \lbrace \rbrace^n,key-exchange semantic-security,security semantic key exchange
156,secrecy pseudorandom functions,let h_2 keyed hash functions e.g h_i x sha_ s_i||x pseudorandom s_1 s_2 let s_n h_1^k s_0 k_n h_2 s_n s_0 secret pseudorandomly chosen distribution using k_n sequence forward-secure keys secure i.e. forgetting s_n changing k_ n+1 noting h_i known attacker seems able distinguish k_n random knowing s_ n+1 k_j j h_i modeled random oracles seems attackers require \omega oracle requests average k key length h_i lose factor reduction attacker guesses disjoint s_j j n attacker gains information intuition correct get better bound \omega good given using sha-256 128-bit security level,hash random-oracle-model forward-secrecy,oracle model random hash secrecy
157,bit independence sha-2 hashes secure,know bit independence good sha2 function output secure example sha512 secretkeynonce256bit 32ytes used message encryption key b next 16bytes/128bits used authentication hmac key message c next 16bytes/128bits used access code non-secret known message carrier user provides code given encrypted message carrier knowledge c yield insight b better use c2=first bits sha256 c weakness extra sha prevent secretkey derived crummy password case c valuable attempted brute-like password guessing tried password produces c likely password correct produce correct people mention hmac weaker side think collision resistance sufficient application,sha-2,sha
158,gpg par2 error correction data plain archive compromise security,following scenario archives compressed hundreds mib size gpg encrypt archives binary ascii armor par2 create error correction data question encrypted archive plain archive error correction data archive compromise security gpg-encrypted data error correction data created encryption stored encrypted archive encrypted archive encrypted archive error correction data alternative better calculate error correction data encrypted data encryption way affect security common sense tells know rationale need archive data question want make sure restored gets damaged way course compromising security,encryption pgp,encryption pgp
159,journals read order keep date interesting research,love suggestions crypto.stack academic journals read range introductory advanced long free requires access fees feel free edit question looking specific fields,encryption,encryption
160,public key reverse encryption algorithm known,reading getting end-to-end encryption reading notice something want send message cell cell b public key pass message algorithm send cell b question knowing public key gives power reverse engineer message sent possible knowing algorithm created code code get original information,encryption public-key,encryption public key
161,compute secret form \mathsf s=sk\cdot g^a,standard way compute secrets shares t+1 combination n constructs secret \mathsf s=sk\cdot g^a generator \mathsf g \in \mathbb z _p \mathsf sk chosen random \mathbb z _p,secret-sharing shamir-secret-sharing,secret sharing shamir
162,aes gcm implementation c,implementing cipher gcm mode c questions code based code found reference copy relevant portions http //blogs.msdn.com/b/shawnfa/archive/2009/03/17/authenticated-symmetric-encryption-in-net.aspx difficulty understand additional authenticated data aad gcm implementation aad consist b aad stored c detrimental operation cipher leave aad blank // authenticated data becomes part authentication tag generated // encryption part ciphertext decrypting // ciphertext authenticated data produced // authenticated data match encryption decryption time // authentication tag validate aes.authenticateddata encoding.utf8.getbytes additional authenticated data understand supposed utilize tag property need store tag created b data authentication portion gcm implemented tag encryptor.gettag certain retrieve iv nonce encrypted data code referencing makes call aes.iv getnonce removing bytes encrypted data someone able answer questions surprised worth shot thanks,encryption aes gcm,encryption aes gcm
163,rsa key size size private key exponent,implemented key pair generation scheme rsa algorithm taken length private key exponent rsa key size got know rsa key size size modulus n wrong take rsa key size size private key exponent generate private key bits increase size private key exponent modulus n,rsa key-size,rsa key size
164,useful modern electronic communication,seen time time questions various otp schemes otp i.e stream cipher schemes common otp troubles appear extend size generated key generate key get key material recipient electronic communication storage encryption appears scheme impossible make work works benefits clear requirement key needs size input seems unbearable many modern use cases encryption practice useful modern cryptography component used proofs example ideal encryption algorithm i.e possible base otp provide information theoretic strength hashing authentication etc,one-time-pad,pad time
165,rsa bit key benchmark,benchmark rsa operations computer want know 4096-bit long keys general computers many encryptions decryptions possible second benchmarks found 1024- 2048-bit keys,rsa performance,performance rsa
166,composing inverting symmetric encryption keys,using symmetric encryption algorithm e message users send e recipient recipient compute e^ -1 e =m retrieve message symmetric encryption algorithms secure send e^ -1 recipient compute e e^ -1 =m suppose symmetric keys k l encrypt compute k l =m secure encryption k l compute new key kl kl =k l know xor properties used block question exist secure symmetric algorithms properties used multiple blocks,encryption symmetric,symmetric encryption
167,leakage secure party computation,trying understand garbled circuit based approach secure party computation much leakage classic millionaire problem comparison circuit used imagine want arithmetic operation addition multiplication revealing individual wealth need reveal individual wealth using garbled circuits approach running protocol addition circuit sum total wealth reveal millionaire wealth simple difference total wealth self wealth secure party computation recommended class circuits,multiparty-computation garbled-circuits,garbled circuits computation multiparty
168,possible correct exponent rsa public key altered,possible change exponent rsa public key,rsa,rsa
169,conditions perfect secrecy vigenere cipher,please forgive ignorance major looked cryptography seems stupid question quiz attempting head wondering course credit receiving certification passing interest attempted question multiple times getting wrong understand question consider vigenere cipher lowercase english alphabet key length following message spaces scheme secret check apply set 7-character strings lowercase english letters set strings lowercase english letters containing characters set 6-character strings lowercase english letters set 5-character strings lowercase english letters know getting punished combinations available due criteria point guessing learning annoyed quiz following considered correct answer aspect question secret length key equal length messages message space seems answer wrong wrong key individual member strings message space length messages message space combined i.e turning time pad key length total message space go breaking question arrive answer sort mathematical reasoning taking blind shots description introduced vigenère cipher presented following way said key string letters english alphabet plaintext consist letters english alphabet encrypt given plaintext key shift character plaintext amount dictated next character key view simple addition modular letters english key shorter plaintext wrap key needed decryption reverses process,vigenere,
170,public key encryption secrecy,known non-trivial system secure public key encryption time function computable pubkey privkey pairs generated time privkey encrypting pubkey encryptor chooses value appropriate range given privkey0 time privkey0 appropriate range \qquad compute privkey1 time privkey1 given privkey generated original privkey \qquad applications message encrypted pubkey \qquad time privkey decrypt message given privkey generated original privkey \qquad applications messgae encrypted pubkey \qquad time privkey infeasible learn anything message trivial system generating keys privkey paired chosen state forward-secure pseudo-random number generator pubkey list public keys ordinary pke system generated using pseudo-random output state time function taking first entry pair range values non-negative integers less number ordinary public keys list encryption pubkey pair ordinary encryption t'th ordinary public key list step updating changing first part privkey changing state generating first ordinary public keys step decryption using known state regenerate ordinary private key t'th ordinary public key list using private key decrypt second part encrypted message problem trivial system size pubkey grows desired size range values,public-key,public key
171,effect salt attacks hashes fundamental properties,interested analyzing adding salt hashed passwords affects types attacks use types attacks hashes follows hashed output looking matching input pre-image input output want find matching input second pre-image input want find output collision thought addition salt output affect ability perform attack reliant output find matching input salt chances finding matching input becomes impossible check output possible salt attack known using rainbow table,hash salt rainbow-table,salt hash table rainbow
172,making prfs prgs,possible take prg g k stretch n\cdot2^n read output table prf f k input output size n sounds possible read done,pseudo-random-generator pseudo-random-function,function random pseudo generator
173,hmac assumptions cryptographic hash,according wikipedia cryptographic hash function following properties pre-image resistance given h difficult find message h h second pre-image resistance given m_1 difficult find m_2 m_1 \ne m_2 h m_1 h m_2 collision resistance difficult find distinct messages m_1 m_2 h m_1 h m_2 assuming h hash function following function h — understanding — hash function h m_0 || h m_1||m_2||\dots||m_k m_i th byte h leaks byte leaking byte find pre-image collisions looking hmac wikipedia says takes hash function maker assumptions hash function taking hash function h let leak \operatorname len key bytes long message hmac hmac insecure everybody sees key h cryptographic hash function — case question h cryptographic hash function building hmac requires additional assumptions additional assumptions fulfilled hash function secure hmac properties imply properties see pbkdf2 takes prf hmac-sha256 secure hmac given hash function properties prf understanding questions assumptions hmac,hash hmac,hash hmac
174,math replace s-boxes good bad idea,following going brain week thoughts known cryptographic community someone provide link i’m making classic newbie mistake cryptographic internal functions operating x=f x table lookup boxes inverse box separate table 16-bit sbox inverse implemented little math tables use prime +1 pick constants p q recursion seed seed p touches values select q p q ~~mod~~ p // example values q x+1 p -1 // x y+1 q -1 // reverse // x+1 puts 16-bit x range recursion works // -1 end makes result fit bits values p recursion touches values “mod implemented little subtract actual division required reasonable part good encryption replace 8-bit box tables getting carried 32-bit non invertible sbox m=2^ +1 prime full term sequence recursion form seed seed const operation formed subtract don’t care super accurate test subtract want accurate encryption code performing z ^= x+1 const -1 performed decryption recover value “32-bit sbox” useful concept,algorithm-design s-boxes,boxes design algorithm
175,pass arbitrary signature certificate,trying sign certificate x509 using secret sharing shareholders combine signatures produce final signature case signed certificate understanding entity sign certificate therefore want know entities data x509certificate taken input signing algorithm want data signed shareholders final combination passed x509certificate valid signature possible done alternatives,encryption signature secret-sharing certificates threshold-cryptography,sharing cryptography encryption threshold secret signature certificates
176,des crack simulation,wish simulate implementation des cracker using verilog paper read give abstract hints concrete steps go done example des encryption exists sequence steps ordered connection known blocks,cryptanalysis des brute-force-attack,attack des force brute cryptanalysis
177,test security cipher,got asked question know answer test security cipher comes test famous attacks padding attacks exhaustive searches modifying input expecting output timing attack… idea,cryptanalysis encryption,encryption cryptanalysis
178,ntru digital envelope everyone know hash function h used,simple question original cryptosystem using digital envelope article found http //grouper.ieee.org/groups/1363/lattpk/submissions/ntru.pdf said need generating function g hash function h suppose alice wants send message bob use generating function g hash function h bob recieves ciphertext e certain point decryption said bob compare c h c b suppose eve exists question bob eve know g h way decryption described bob needs know h clear knows thanks advance,hash public-key cryptanalysis post-quantum-cryptography ntru,hash cryptography ntru cryptanalysis key quantum post public
179,publickey unknown encoding,public key migjaogbakv4oklpybaqefaaocadqtnissvdlp+mtswzjdbtk1j+4+qaysjuence +1rcnerjdna2lts2y//rewxwo8jd3mu42gfzjrjhslfogynx3efumbvebwlqungt smedxuvafbl3soqu7e5relisuarcjjigz86bqdx0x63vpxagmbaae= use online base64 decoder say it’s invalid base64 encoding – decoding fails get decode using apache commons base64.decodebase64 function current implementation java string pub_key migjaogbakv4oklpybaqefaaocadqtnissvdlp+mtswzjdbtk1j+4+qaysjuence+1rcnerjdna2lts2y//rewxwo8jd3mu42gfzjrjhslfogynx3efumbvebwlqungtsmedxuvafbl3soqu7e5relisuarcjjigz86bqdx0x63vpxagmbaae= byte keybytes pub_key x509encodedkeyspec spec new x509encodedkeyspec keybytes try keyfactory factory keyfactory.getinstance rsa publickey key factory.generatepublic spec cipher cipher cipher.getinstance rsa cipher.init cipher.decrypt_mode key byte decrypted cipher.dofinal base64.decodebase64 zm/qr/frkzawabbzyk7wfqjnmvzozrwwtvfqwihpmzauqeo+y+sb/x9+tzwtbqmu45/gv4yhkv0bbdl8f6rif7rjap7iqufqbdeiaray42igz8pb6a0q0rsnjww+tltljg5ctrgzq8sloo+u03t6de1wy73fu5h6xhxxzero0tq= string tada new string decrypted standardcharsets.utf_8 tada.length catch exception e e.getmessage exists c++ implementation – works – moment get factory.generatepublic spec get invalidkeyspec error tell public key encrypted text get unencrypted text wrong public key getting error wrong key spec,rsa public-key java,java rsa key public
180,extension password hashing using fibonacci,taking class named applied cryptography final project create password hashing method using least existing algorithm add additional steps make harder decrypt using sha1 console application c user input hashed using sha-1 byte resulting hash compute fibonacci series value int append string positive append result fibonacci computation hashed using sha-1 code using system using system.collections.generic using system.linq using system.security.cryptography using system.text using system.threading.tasks namespace proyecto class program static void main string args string str console.readline stringbuilder fibo new stringbuilder string result1 result2 result1 getsha1 str int getsha1 str .length i++ fibo.append fibonacci result1 fibonacci result1 result2 getsha1 fibo.tostring console.writeline result1 console.writeline fibo console.writeline result2 console.readline public static int fibonacci int n int int b // n steps compute fibonacci sequence int n i++ int temp b b temp b return public static string getsha1 string str sha1 sha1 sha1managed.create asciiencoding encoding new asciiencoding byte stream null stringbuilder sb new stringbuilder stream sha1.computehash encoding.getbytes str int stream.length i++ sb.appendformat x2 stream return sb.tostring want know additional fibonacci round improves strength function password hashing function suggestions,hash algorithm-design passwords sha-1,design passwords hash algorithm sha
181,bit commitment 1-out-of-2 oblivious transfer,know protocol bit commitment using regular ot bob chance learning bit alice transferred goes commitment phase alice chooses bit b i=0 i=n^2 alice chooses x_ ij j\leq n^2 \sum_jx_ ij \equiv b \pmod alice bob oblivious transfer ot x_ ij =y_ ij j reveal phase alice sends committed bit b x_ ij \sum_jx_ ij \not\equiv b \pmod bob rejects accepts protocol uses n^2 iterations trying find protocol use n iterations \binom -ot 1-out-of-2 oblivious transfer exponential security n thinking using xor random bits way think linear security think ... commitment phase alice chooses b random bits b_1 b_2 \dots b_ b_1\oplus b_2=b b_3\oplus b_4=b \dots b_ 2n-1 \oplus b_ =b bob chooses bits c_1 \dots c_n bob \binom -ot b_1 b_2 c_1\ b_3 b_4 c_2\ \dots b_ 2n-1 b_ c_n\ reveal phase alice sends committed bit b b_i\in b_ bob checks b_1\oplus b_2=b b_3\oplus b_4=b \dots b_ 2n-1 \oplus b_ =b fails rejects accepts like inputs know heading right direction,protocol-design commitments oblivious-transfer,design transfer protocol commitments oblivious
182,use ecb cbc encryption mode block cipher,someone tell mode ecb cbc better decide mode use modes better edit question asked long working flex application enrypt/decrypt files,encryption block-cipher modes-of-operation cbc ecb,cbc modes encryption cipher operation block ecb
183,pbkdf2 uses hmac-sha1 generate keys key hmac,reading pbkdf2 noted following dk pbkdf2 prf password salt c dklen prf keyed hmac seem find use key hmac,pbkdf-2,pbkdf
184,structure introductory course cryptography,many introductory courses cryptography treatment secret-key crypto start otp block ciphers public-key cryptography revolve rsa notion padding matching exercises showcasing insecure practices using small parameters common introductory course students consider otp useful cipher tell try perform things encrypt private key believe taught ask better roadmap short introductory course cryptography aimed students inclination towards engineering gives audience fair grasp basic functions modern cryptography performs signature authentication key exchange encryption.. differ goal illustrates functions concrete methods requiring advanced math rsa implementable small parameters anything compute including spreadsheet formulas touching formal definitions security less game proofs advanced cryptanalysis.. realize actual course content depend time allocation math background audience varying organization goals learning environment wish things left inasmuch possible concentrate cryptographic techniques coherent exposition cryptography question considered on-topic,pedagogy,pedagogy
185,pbkdf2 salt ids,unique identifiers like keep secure information tokens tokens verifiable using algorithm end system presented id comparing values thinking use pbkdf2 one-way function get tokens ids verifiable use salt security issues related use salt pbkdf2 ids,hash collision-resistance pbkdf-2 one-way-function pbkdf,function hash resistance collision way pbkdf
186,compare blockmode cbc diffuser xts,problems understanding advantage aes-xts compared cbc diffuser read something filevault paper mention modes operations xts cbc diffuser advantages xts modes encrypt data units way cbc sector number somehow used build iv xts tweak value includes blockoffset data block encrypted makes sense encrypting harddrives/partitions see advantage xts write following several advantages alternatives aes cbc requirement initialization vector tweak key derrived block number block encrypted tweak value different unlinke aes-cbc aes-xts prevents changing specific bit data unit xor-ing aes input different shifted version encrypted tweak compare xts cbc diffuser ... anybody know advantage xts somebody explain second advantage ... es-xts prevents changing specific bit data unit xor-ing aes input different shifted version encrypted tweak. thank much thomas,encryption modes-of-operation cbc xts,encryption operation xts modes cbc
187,public key crypto modular arithmetic,comment reddit math response statement people communicate secrets third party listening small simple example public key cryptography take message treat number multiply bunch primes send multiply bunch primes send divide primes send divide primes get original message comment upvotes reddit math strikes unusual modular arithmetic used example work large primes used,public-key modular-arithmetic factorization commutative-encryption,commutative encryption factorization modular key public arithmetic
188,aes identity key,following questions pure theoretical nature application mind key makes aes identity function key makes aes identity function certain inputs known keys exist keys known ciphers example want encrypt hello stackexchg aes said key ciphertext hello stackexchg encrypt hello stackexchg perfect cipher one-time-pad possibility resulting ciphertext hello stackexchg possibility exist small ciphertext random depending plaintext corresponding key one-time-pad zeros,aes,aes
189,causing conflicts whirlpool implementation versions,see layman articles e.g wikipedia whirlpool hash function current versions say referenced whirlpool-0 original reference code whirlpool-t optimised hardware version changed whirlpool let’s call “current” due weakening diffusion matrix according article see python implementations use “current” version using librhash linux i.e rhash -w file i’m verifying things openssl dgst -whirlpool file openssl rhash consistent different current version noticed openssl rhash seem correlate previous versions undocumented update default whirlpool s-boxes something version conflict whirlpool update missed,hash implementation openssl,implementation hash openssl
190,regular expression matching encrypted data using secure multiparty computation,"lets consider secure multiparty computation based secret sharing schemes garbled circuits approach regular expression matching secret shares words texts trivial solution secret share letter word distribute different parties party executes regular expression secret shares letter example server\_01\_lab secret shared letter e r v e r,0,1 l b regular expression server *lab build secret shares letter send regex respective shares individuals matching trivial breaks security create secret shares individual letters adversary perform simple frequency analysis shares break better better approaches exist",secret-sharing multiparty-computation shamir-secret-sharing,secret sharing shamir computation multiparty
191,homomorphic encryption schemes support algorithms conditions/branching,apparent title question make clear basic understanding homomorphic encryption like know homomorphic encryption schemes support algorithms conditions/branching likely impact overall adoption schemes given limitation schemes useful real life thanks,homomorphic-encryption,encryption homomorphic
192,block cipher modes,questions regarding block cipher modes modes considered best know cbc problem iv next block plain text xored result cipher text last block ofb ctr best ssl blockciphers cbc-mode tls use cbc modes used ssl,block-cipher modes-of-operation tls cbc ctr,cbc modes ctr cipher operation block
193,hash function allows decide b hash hash b,possible construct hash function following property hash hash b b integers tell greater b -- knowing actual values b. better hash hash b b ordered sets strings tell elements overlap b e.g position ordered set -- knowing actual contents b,hash,hash
194,noise bound fhe integers,studying paper homomorphic encryption integers marten van dijk craig gentry shai halevi vinod vaikuntanathan questions proof lemma a.1 page element public key form x=pq+r encryption c← m+2r+2\sum x_i x_0 proof lemma a.1. public key x=pq+2r encryption c← m+2r+\sum x_i x_0 problem made confused tried proof first definition encounter problem follow flow proof first definition reached noise term m+2r+k*r_0+ \sum need next get upper bound |m+2r+k\cdot r_0+ \sum got |m+2r+k*r_0+ \sum \leq m+2\cdot2^ \rho\prime \tau \cdot \rho +\tau \cdot \rho =m+2\cdot2^ \rho\prime +2 \tau2^ \rho definition permitted circuit thesis correct least m+2\cdot2^ \rho\prime +2 \tau2^ \rho \leq \rho \prime +2 satisfied anybody help get upper bound noise original question reading https //eprint.iacr.org/2009/616.pdf reading proof lemma a.1 page page thesis tells \tau2^ \rho+3 follow inequality guys help understand proof lemma a.1,homomorphic-encryption,encryption homomorphic
195,known inverse hash lookups string,wondering known inverse hashes hash lookups common hashes md5 sha1 sha2 etc string hash value i.e bytes ... hash md5 sha1 hash x take reverse hash lookup rainbow table ...,hash rainbow-table,rainbow hash table
196,cbc-mac apply hash function whole message,apply hash function whole message convert message blocks hash blocks avoid collisions,cbc-mac,cbc mac
197,safe derive different keys password key derivation function using different salts,like know following process harm security fictional system persisted data stolen system user single password password used order derive different keys using key derivation function pbkdf2/bcrypt/scrypt parameters using different salts keys persisted system salts persisted persisted key allowing theoretical brute forcing using corresponding salt order retrieve password allow attacker information regarding second key depend actual kdf,key-derivation salt password-based-encryption,based derivation encryption key password salt
198,learn basic cryptography know passwords bitcoin,knowledge passwords consist setting diceware master password know hashes convertible original password basic question want know answer password predicted hash known many characters least newbie friendly crypto guide helpful beginner guide issue bitcoin s. board well,passwords bitcoin,passwords bitcoin
199,rsassa-pkcs1-v1_5 good signature scheme new systems,rsassa-pkcs1-v1_5 good signature scheme recommend people use new systems believed secure represent state-of-the-art rsa-based signatures understand rsa-pss newer signature scheme standardized pkcs found memo rsa recommending people transition rsa-pss right better recommend people use rsa-pss rsa-pkcs1-v1_5 going recommend single rsa-based signature scheme recommend new systems use practical relevance instance moment current draft webcryptoapi recommends supporting rsassa-pkcs1-v1_5 rsa-pss,rsa signature standards,standards rsa signature
200,aes-ni implementation examples,newer intel amd processors hardware support implementing aes using instruction set aes-ni instructions aesenc aeskeygenassist etc know clean example implementation using instructions x86-64 using wmmintrin.h use gcc gas nasm ok found couple implementations cluttered ifdefs follow macros begin clean easy read implementation say encrypting block using aes build,aes implementation,implementation aes
201,verifying ecdsa signature pykcs11,pkcs11 compatible hsm token holds private key new ecc used rsa public/ private key signing verifying easy using pykcs11 python pkcs11 functionality signs data pkcs11 mechanism ckm_ecdsa verifying signature pykcs11 working want verify signature pubkey related x509 certificate x509 created hsm token succeed verifying ecdsa signature openssl dgst command example openssl dgst -ecdsa-with-sha1 -verify x509 -pubkey -in newcert.pem -signature cat sign base64 -d file file contains raw data contains base64 encoded ecdsa-signature pykcs11 please tell signatures verified external tools openssl dgst thank,dsa openssl pkcs11,pkcs11 openssl dsa
202,rsa signing implemented top rsa encryption/decryption,need use rsa-sha256 signing microsoft cryptoapi providers support possible get handle cryptoapi provider encrypt/decrypt rsa sign sha1 sha256 private key unavailable say smart card device possible fill gaps calculate sha256 hash data encrypt provider get valid signature encrypting hash seem work produces wrong result signing algorithm modification encryption algorithm provider support nothing,encryption rsa signature sha-256,encryption sha rsa signature
203,security self-decrypting block-cipher,block-cipher example aes plaintext x use different function encrypt decrypt \text encrypt x \text decrypt =x build function permutation p x p p x =x f x =\text decrypt p \text encrypt x f f x =x function encrypts decrypts reduce security new attack cipher know stream cipher encrypts decrypts using function block-cipher,encryption block-cipher,encryption cipher block
204,instruction similar pclmulqdq valuable post quantum key exchange,paper describes quantum key exchange based ring learning errors problem used slight performance impact assuming popularized approach achieving quantum-safe tls hardware manufacturers optimize approach ... words new instruction needed existing cryptographic instructions sufficient layman trying get idea take get quantum safe tls mobile device power constraints apply assumption hardware optimization necessary mobile device websites implement rlwe-ecdsa-aes128-gcm-sha256 battery life performance suffer phones hardware market catches,elliptic-curves tls post-quantum-cryptography quantum-cryptography,tls cryptography curves elliptic quantum post
205,require csprng output indistinguishable true random,read indistinguishability output true random stated requirement csprngs nobody bothered give rationale strong requirement yarrow fortuna use block cipher generator limit amount output produced particular key key changed aka rekey limit reached reason block cipher generate duplicate output blocks design attacker request large amount output prng find duplicate blocks determine output true random information attacker get cipher block size weaken security bit public knowledge implementation open source see lack duplicate blocks weaken security,randomness random-number-generator,randomness random number generator
206,generating encryption keys biometric fingerprint templates,go generating encryption keys biometric fingerprint templates extracted fingerprint using griaule sdk digitalpersona sdk sdk return fingerprint template iso ansi fingerprint templates format way using fuzzy extractors secure sketch bio hashing approach appreciate anyone show go programming language intend use obtained encryption keys encryption decryption data,encryption entropy,encryption entropy
207,enigma-style cipher sufficient complexity considered secure today,regarding german enigma machines recall reason defeated allies able generate massive database possible rotor settings day key encoded beginning message given computers today simulate enigma-ish machine arbitrary number complexity rotors example rotor shows tenth character goes different number time transmission errors low binary data plain-text gzipped base64'ed text tends beat frequency analysis possible use enigma style cipher encrypt data today susceptible similar pitfalls original enigma general question older ciphers re-invented computers viable today world,classical-cipher substitution-cipher enigma,cipher enigma classical substitution
208,designing key expander ciphers,possible compose combine n ciphers cipher_0 cipher_1 ... cipher_n way generate n ciphertexts key k recovering key k n ciphertexts equivalent breaking n ciphers note size key k size n ciphertexts ||k|| ||cipher_i k k || \times |k| ||cipher_0 k k ||+||cipher_1 k k ||+ ... +||cipher_n k k || asking finding pre-image n ciphertexts original key used related answer changing algorithms encryption,algorithm-design,design algorithm
209,e g g bilinear pairings holds,get point prime order bilinear pairings \mathbb g \times\mathbb g \rightarrow\mathbb g _t g= generator \mathbb g n=p*q p q primes e g g ^n=1 e g g ^n=1 holds,pairings,pairings
210,utility elliptic curve cryptography,suppose public key cryptography schemes knew diffie hellman rsa elgamal set civilization important applications elliptic curve cryptography viable substitutes edit came question gives information looking like know better elliptic curve cryptography is/ classical encryption schemes applications elliptic curve cryptography superior,public-key elliptic-curves,curves elliptic public key
211,carter–wegman macs key reuse mac tag kept secret,poly1305 ghash secure authenticators use reuse poly1305-aes chacha20-poly1305 aes-gcm reveal authentication key understanding poly1305-aes chacha20-poly1305 aes-gcm output hash function encrypted using stream cipher nonce reuse gives xor hashes suppose uses aes ecb mode encrypt authentication tag using secret key unrelated keys message nonce case nonce reuse gives information auth tags collide happen probability -56 use blake2 keccak hash nonce secret key tag produce larger tag least understanding cryptographer wrong note plan using actual software,mac gcm nonce poly1305 carter-wegman,nonce poly1305 carter gcm mac wegman
212,specification scream stream cipher unclear,implementing c++ scream stream cipher scream family composed scream-0 scream-s scream-f. question using scream-s. specifications scream given paper scream software-efficient stream cipher find reference sourcecode cipher helped specs include many notations questions scream cipher section matrices say x x+1 galoisfield replaced section possible implement function f optimize author define multiplication u0 m1 s1 x multiplication following gf polynomial x^8 x^7 x^6 x algorithm f section write byte_0 refer msb lsb integer f core algorithm important know understand kind details,symmetric stream-cipher,symmetric cipher stream
213,computational diffie-hellman problem group quadratic residues,suppose n=pq p q safe primes \mathbb qr _n group quadratic residues cyclic group order \frac \phi let g generator \mathbb qr _n computational diffie-hellman problem defined given u=g^u\in\mathbb qr _n v=g^v\in\mathbb qr _n u v chosen uniformly random \mathbb z \frac \phi compute cdh u v =g^ uv factored computing cdh u v =g^ uv hard,diffie-hellman reference-request factorization quadratic-residuosity,hellman reference request factorization residuosity quadratic diffie
214,analysis enciphered plaintext using algorithm key,please forgive impracticality question curious behaviors encryption applied output suppose encryption algorithm e using key encrypt output given plaintext e e e e ... e plaintext modern encryption algorithm variant aes display kind cycling respect output long compositions known number compositions final output plaintext,cryptanalysis,cryptanalysis
215,creating secure key,imagine lecturer undergraduate office conducted key exchange protocol hold string x possible curious student sitting next lecturer bus gained information e x un student eve gained bits information e x quick glance x contains bits chosen beforehand describe lecturer undergraduate office produce secure key k x encrypt final exam electronic transmission student eve knows nothing key k,encryption transport-security,encryption security transport
216,bijective hash function,suppose h n \rightarrow n h bijective difficult derive x h x type function possible strength realize rsa discrete logarithms fulfill thinking using standard operators primitives acceptable,hash,hash
217,selective format-compliant jpeg encryption,working towards building format-compliant encryption system pictures able obscure specific areas picture i.e faces car license numbers ... keeping rest unaltered aim instance able publish picture given social network making sensitive regions visible limited number people subset friends granted permission arguable ideas regarding pixel permutations bmp stumbled face-first fact social networks use jpeg format compressed ruining scheme stuck trying find new encryption scheme following properties format-compliant image valid jpeg openable viewable unobtrusive much possible encrypted image chunk colored pixels encrypted areas keep close look something blurring pixelation reversible rest image unaltered secure crypto perspective perceptual point view image obscured make e.g face unrecognisable decoding opposite aim finding acceptable middle ground trying work droogenbroeck benedett techniques selective encryption uncompressed compressed images proposes square keeping dc aka significant coefficient dct encoding rest works mid-large images encryption done small squares dc coefficient -which holds energy- left unaltered larger image smaller become proportion becoming useless images papers found jpeg2000 make everything easier supported anything seem reasonable solution know open-ended-questions side question previous work discussed solution problem similar ideas approach thank time please let know clarify link pictures mean think allowed certain rep threshold edit fgrieu noted added problem please see example facebook decompresses recompresses image uploading means additional unavoidable quality loss means fine-grained tricks coefficients – least significant ones – work thanks ilmari karonen linking paper problem pointed fgrieu avoidable social networks instance google+ recompress image problems,encryption protocol-design reference-request format-preserving compression,protocol compression reference format encryption preserving request design
218,last block contain full block padding cbc encryption,trying understand ssl poodle attack wondering last block cbc record full padding mean useful data multiple key size misunderstanding something seem pad number full blocks padding see ssl library thanks,block-cipher cbc padding,padding cbc cipher block
219,exploiting xor one-time-pads alphabet size power,realized key chosen range power one-time-pad leaks information plaintext example alphabet naturals see ciphertext plaintext letter example 20-23 assumed alphabet naturals encrypting decrypting work fine exploited general small line possibilities try come english words coming words phone numbers larger unrelated question given limitation people use xor modular addition xor faster,one-time-pad xor,xor pad time
220,probability repeated encrypted block output feedback ofb mode,probability/chances repeated encrypted block output feedback ofb mode existing documentation/studies existing please provide link documentation want analyze find documentation probability repeated encrypted block ofb existing hard find,ofb,ofb
221,access control problem oblivious transfer,sure title proper question comes reading k-n oblivious transfers k-n oblivious transfer protocol party n messages party b wants retrieve k basic requirements ot know k messages retrieved b. b know messages k messages b access right n messages b access right b retrieve k messages case b retrieve n messages b access ot b retrieve n messages existing ot schemes require n communication overhead question mind hard think practical scenarios ot utilized anyone give application examples ot edit found research papers access control ot problem asked scenario information retrieve access control seems important interested possible applications ot access control utilized,oblivious-transfer access-control,access oblivious control transfer
222,mceliece variants support signatures,niederreiter cryptosystem variants support digital signatures sign arbitrary signatures niederreiter cryptosystem key signature sizes,post-quantum-cryptography mceliece niederreiter,quantum post niederreiter mceliece cryptography
223,white-box implementation cryptographic algorithm,white-box implementation white-box implementation specific properties,implementation white-box,implementation box white
224,way encrypt integer arbitrary range,need algorithm take integer arbitrary range key bytes initialization vector bytes return integer range latest attempt encrypts integer aes_ofb requested range using stream cipher ciphertext truncated ruining whole thing issue decryption process early pseudocode data range inclusive data aes_ofb_encrypt data // keystream data == range try data data // keystream data == range return data // decrypting data range inclusive data aes_ofb_decrypt data // keystream data range // halting early return // right value better way encrypt integers arbitrary range want strong aes algorithm example vulnerable brute force attack cases integers exceed bits length want strength aes algorithm possible,encryption aes format-preserving ofb,ofb encryption aes preserving format
225,security secret key identity-based encryption,key set phase server generates pub=s.p secret key.then gives clients pub p public parameters pairing descriptions possible clients pre-compute r.p r.p=pub r=s,pairings,pairings
226,determine complexity sat problem,standard way determine complexity specified sat problem researching algebraic cryptanalysis came solving multivariate quadratic equation systems using cryptominisat nice evaluate complexity full cipher equation system depend number polynomials variables way estimate time needed solving equation system parameters need know find,algebraic-attack,algebraic attack
227,current actual budget needed build des breaker machine,eff electronic frontier foundation built des cracker budget july assume cost des breaker less estimations cost re-using design,des brute-force-attack,attack des force brute
228,one-time-signature based codes,trying understand sentence bold follow paragraph new one-time signature scheme syndrome decoding keygen given security parameter \lambda choose suitable integers k n r u w actual difficulty sdp n r u meets level \lambda u\leq w private key generator matrix p\xleftarrow \mathbb f _2^ k\times n random n k -code whose codewords weight exceeding w weight limit holds particular rows p bit w bound chosen \mathbb f _2 weight row p follows central limit theorem normal distribution ... give example bit w bound please,signature post-quantum-cryptography,quantum post cryptography signature
229,diffie-hellman key exchange work,learning cryptography failing understand diffie-hellman key exchange works someone please demonstrate using mathematical notation possible pseudocode works failing understand prevents man-in-the-middle attacks oscar sitting middle conversation change keys actual users communicate installing broker entire session,diffie-hellman,diffie hellman
230,relative merits aes ecb cbc modes securing data rest,need store several payment card numbers pcns mainframe database rest assume attacker access stored data assume availability secure device store unique constant key used pcns necessary store unique constant iv used encryption master key encrypt aes-256 data ecb cbc mode aes-256 data ecb cbc mode relative merits demerits following possible options encryption decryption use master key ecb mode heard/read weak use master key iv cbc mode prepend 16-byte microsecond-or-finer timestamp pcn use master key iv cbc mode mean storing additional 16-byte block ciphertext problem decryption discard bytes resulting plaintext available device 16-byte pseudo-iv something better please specify extra kudos explaining possible attacks large quantity sixteen-digit numbers encrypted new know easy noobs produce stuff average cryptologist find laughable please gentle -- trying learn placed security.se looks better fit y'all disagree grateful migrate closing off-topic additional clarification following answer curious reason include ecb mode allow save half storage space messages block suspect affect arguments interested understanding specific vulnerabilities arising low entropy messages message space possibilities reduced pcn checksums use fixed universal key key+iv,aes cbc ecb,cbc aes ecb
231,elgamal encryption create different key block sent,ask elgamal algorithm elgamal algorithm used new key encryption process word new key chunk example message block block p p prime number used elgamal many keys used encrypt message,encryption elgamal-encryption,encryption elgamal
232,correct order operations time pad cipher,according time pad cipher unbreakable wikipedia page explains perform simple encryption process hand encryption adds message key modulo decryption subtracts key ciphertext modulo source explains encryption process subtract decryption process add sources correct security difference order operations,one-time-pad,pad time
233,assumed prf key chosen,defining feature prf f ^k\times\ ^s\mapsto\ ^* selected random indistinguishable function g ^s\mapsto\ ^* selected random key parameter selected random assumed function f case question motivated use configurable prf kdf finished verify messages protocols tls secure resumption attacks exploit assumptions regarding relation master key authenticity resumed connections safe prevent secure resumption attacks using hash handshake messages master key derived tls master key calculated master_secret prf pre_master_secret master secret clienthello.random serverhello.random suggestion discussed replace concatenation random values hash handshake messages point question prevent attacker able select pre_master_secret value selecting connections assume adversary able define cipher suite including key agreement mechanism hash algorithm prf algorithm thing assume algorithms meet conventional minimum security requirements algorithms handshake messages hashed include client_hello server_hello server_certificate server_key_exchange client_key_exchange pre_master_secret depends information present server_key_exchange client_key_exchange i.e messages fixed pre_master_secret fixed simplicity assume server_key_exchange client_key_exchange messages included handshake hash security adversary able design prf select pre_master_secret reducible question suppose function f function given pair v find value k f k v turned f,pseudo-random-function,function random pseudo
234,leak-proof protocol thing possible,possible design protocol guarantees malicious implementation leak secret data breaking protocol setting alice bob pre-shared secret key k. using key alice encrypts bunch plaintexts sends bob collection files plaintexts short-ish texts natural language plaintext encrypted others decryptable authenticated encryption used eve receives copy collection data gets i.e timing side channels communicate previous arrangement e.g pre-share secret keys alice communicate eve send data defined protocol want ensure alice manipulate encryption consequences detectable bob way eve obtain information secret key assume transmission reliable bob decrypt files conclude bad actor want eve obtain plaintexts tolerable eve detect multiple copies plaintext seems kind randomness protocol excluded example use encryption scheme random iv prepended ciphertext alice encrypt secret key k using secret key known eve ke apply iv iv e ke k instant leak protocol adds randomness plaintext encryption alice manipulate encryption result choosing random value worst case use brute force changing random bits specific bits ciphertext assume values wants average need iterations leak n bits data say encryptions small number unnoticeable modern equipment weak smartphone alice able leak ~10 bits data encrypted file next thought tried deterministic encryption synthetic iv based plaintext similar siv-ctr construct obvious drawbacks caused low natural-language plaintexts scheme preclude alice leaking manipulate plaintexts way obvious bob example try adding spaces ends text lines insert non-spacing unicode chars gets desired bit pattern ciphertext know estimate effort need leak n bits ciphertext previous case last option seems better others manipulations detectable bob least detection happens outside domain protocol reliable possibilities,encryption protocol-design symmetric,symmetric encryption design protocol
235,zkpps possible server-side hashed passwords,basic zkpp zero knowledge password proof based able challenge client client prove knows password way verifiable server transmitting password order server issue challenge verify response seems server need password plaintext anybody gaining access server able retrieve password possible create zkpp server maintains hashed version password able issue challenge verification,zero-knowledge-proofs,proofs knowledge
236,replay attack ecb mode,replay attacks work found wikipedia ecb mode make protocols integrity protection susceptible replay attacks block gets decrypted way example phantasy star online blue burst online video game uses blowfish ecb mode key exchange system cracked leading easier methods cheaters repeated encrypted monster killed message packets encrypted blowfish block gain experience points citation needed want know replay attack works ecb mode block cipher operation modes ofb avoid,modes-of-operation ecb replay-attack,operation replay modes attack ecb
237,distinguishing cbc-macs,want ask distinguishing attack cbc mac based paper published ketting jia xiaoyun wang zheng yuan guangwu xu distinguishing second-preimage attack cbc-like macs paper says adversary makes n+1 /2 queries -block messages last m−1 blocks want ask authors choose n+1 /2 know cipher input width operated n+1 /2 result integer fractional,cbc-mac distinguisher,cbc mac distinguisher
238,signatures hybrid encryption,public-key settings sign-then-encrypt used provide confidentiality integrity public-key cryptosystems use hybrid encryption searching online best practices signing data found signatures work hybrid cryptosystem sign encrypt data symmetric key literature public key cryptosystems signatures clear extends hybrid cryptosystems,authenticated-encryption,encryption authenticated
239,plaintext ciphertext block sizes,determine largest plaintext block size smallest ciphertext size used rsa n=59768553302699443 using characters,rsa,rsa
240,proving node child,say graph messages b c including parent hash message hashed show b child c children b. example hash message ab3ed hash message b ab3ed e4c90 hash message c e4c90 hash message e4c90 way c children descendants a. way prove certain node child ie siblings,hash hash-tree,tree hash
241,commutative block cipher indistinguishable random assuming random permutation keyspace,define commutative block cipher keyspace finite set k message space finite set application \begin align e k\times \mapsto s\\ k x \mapsto e k x \text noted e_k x \\ \text \forall k\in k \forall x\in \forall y\in \text e k x =e k \text x=y\\ \text \forall k\in k \forall k'\in k \forall x\in e k e k x =e k e k x \\ \end align note last property makes block cipher commutative rest standard definition block cipher application injective implying permutation given finite set e_k encryption key k e_k -1 decryption key k informal question make practical commutative block cipher exhibit distinguishing properties random commutative block cipher expected words something commutative block ciphers aes block ciphers performance motivation pohlig-hellman exponentiation cipher k x \mapsto e_k x =x^k\pmod p public prime p keyspace k integers k k p \gcd k p-1 =1 message space integers x x p commutative block cipher conjectured secure unknown random key known random plaintext properties commutativity multiplicative property \forall k\in k \forall x\in \forall y\in e_k x\cdot y\bmod p =e_k x \cdot e_k \bmod p fixed points \forall x\in\ p-1\ \forall k\in k e_k x =x symmetry message space \forall x\in \mathbb z_p \forall k\in k e_k p-x\bmod p =\big p-e_k x \big \bmod p set permutations e_k forms group composition isomorphic k multiplication modulo p-1 \forall k\in k \forall k'\in k e_k\circ e_ k =e_ k\cdot k'\bmod p-1 turn allows related-key attacks remove properties see variant multiplicative property best manage keeping commutativity poor camouflage inserting practical reversible public permutation message space applying cipher undoing allows adversary observe take advantage multiplicative property chosen-message attack tentative formalization exhibit commutative block cipher e prove concise description independent sizes k allowing grow bounds least big practical purposes practical allowing encryption decryption time space polynomial logarithms sizes k conjectured secure sense knowing full description e exhibit better show plausible assumptions polynomial algorithm wins following game constant positive advantage sizes k grow omnipotent referee randomly choses random permutation p keyspace k random commutative block cipher f k\times s\mapsto algorithm run given possibility make polynomial number queries chosen k x \in k\times obtain z \in s\times verifying according said choice relations e p k x =y e p k z =x relations f k x =y f k z =x algorithm announce referee choice note e practical variant pohlig-hellman exponentiation imagine game overwhelming advantage due underlying multiplicative property note practical requirement make variant pohlig-hellman exponentiation cipher pass test see inserting secure one-way permutation message space input reverse permutation output encryption decryption practical note definition security given related-key attacks weak keys given hypothetical commutative block cipher passing test strengthen w.r.t threats keeping commutativity inserting key input efficient public pseudo-random injection reduced key space original key space,block-cipher commutative-encryption,encryption cipher commutative block
242,whats point iv public,point initialization vector cryptographic modes aes-cbc sent public cant attacker listen reverse iv defeating purpose edit know said question cant attacker listen reverse iv defeating purpose using iv message becomes xxxx yyyy copy respective iv public xxxx cant use make yyyy xxxx clarify assuming decrypter yyyy transformers message following ways f xxxx f key asking attacker cant yyyy f xxxx,encryption initialization-vector,encryption initialization vector
243,need know mode operation decrypt message encrypted block cipher,received encrypted message know key encrypted need know mode operation encrypted order decrypt understanding case mode operation transmitted encrypted file,block-cipher modes-of-operation,operation cipher modes block
244,guessing encryption algorithm based key ciphertext,possible tell encryption algorithm used assuming key encrypted text complicate situation let assume speaking symmetric algorithms common methods discover encryption method,encryption keys symmetric,keys encryption symmetric
245,computational indistinguishability example non polynomial algorithm,wikipedia page computational indistinguishability says ensembles distinguishable non-uniform probabilistic polynomial time algorithm tell help better understand definition searched example algorithm fit restriction -- -in particular non polynomial time algorithm -- differentiate computational indistinguishable ensembles surprise found none ask anyone provide example,statistical-test,test statistical
246,nacl poly1305 implementation modular multiplication,nacl ref implementation poly1305 performs modular multiplication calculate polynomial \mod using following modular multiplication function static void mulmod unsigned int h const unsigned int r unsigned int hr unsigned int j u ++i u j j ++j u += h j r j j j ++j u += h j r j hr u ++i h hr squeeze h ... squeeze reduction sequence mulmod operations rounded freeze operation static const unsigned int minusp static void freeze unsigned int h unsigned int horig unsigned int j negative j j ++j horig j h j add h minusp negative h j j ++j h j ^= negative horig j h j implementation documentation copied various projects code libsodium fork compared various multiplication wikipedia montgomery reduction daniel bernsteins explicit crt method recognise basic implementation overall poly1305 using gmp uses add/mul/mod operations nothing esoteric main loop reduction freeze seem indicate kind residue number system find explicit descriptions work daniel bernsteins motivations writing constant time implementation helps identify anyone recognize algorithm used know of/can provide complete explanation i.e explains magic numbers minusp derived basis xor operations freeze,mac poly1305 modular-arithmetic,modular mac poly1305 arithmetic
247,ecb mode leak characters,ars technica article adobe use ecb mode paragraph passwords according password expert steve sc00bz thomas encrypted mode known ecb poor choice part adobe engineers ecb leaks information passwords last characters lengths certain cases example passwords end e generate encrypted string ends n2authm2+q== characters end mfzq5ogbb5 case,authenticated-encryption ecb 3des,encryption authenticated ecb
248,fips continuous random number generator test practical,section fips pub 140-2 specifies amongst things continuous random number generator test relavant bits call n rng produces blocks n bits ... subsequent generation n-bit block compared generated block test fail compared n-bit blocks equal call n rng produces fewer bits ... ... subsequent generation bits compared generated n bits test fails compared n-bit sequences equal small concerned choice minimum 16-bits one expect see test fail iterations frequent lead noticeable false positives rng used specific case 32-bit trng stretch prevent false positives thoughts,random-number-generator fips-140,random fips number generator
249,boneh-boyen signature scheme,full boneh-boyen signature scheme defines pair secret keys sk \in \mathbb z _n b \in \mathbb z _n pair public keys pk g^a \in \mathbb g b g^b \in \mathbb g anybody point similar signature scheme sk \in \mathbb z _n pk \in \mathbb g,signature,signature
250,fair exchange scheme,wikipedia entry fair exchange lines paper find describing protocol complicated new field cryptology someone give example actual use provide simple implementation,key-exchange terminology,terminology key exchange
251,reusing source single-source randomness extractor,let ext single-source randomness extractor takes -bit seed n -bit source input produces -bit output suppose source x min-entropy k possible reuse x different random seeds s_1 s_l l ≥ words s1 s_l ext s_1 x ext s_l x u_ l d+m hint told think ext inner product bits know answer secure case ext inner product bits,random-number-generator entropy randomness,randomness random entropy number generator
252,research cryptography nondeterministic turing machines,know theoretical topic wondering research cryptography like assuming access nondeterministic turing machines seems like kind exponential hardness assumptions time heirarchy theorem states create functions require n^k operations arbitrary k seems good,cryptanalysis algorithm-design post-quantum-cryptography complexity,algorithm cryptography cryptanalysis complexity design quantum post
253,security exists modification schnorr signature,schnorr digital signature protocol https //en.wikipedia.org/wiki/schnorr_signature signature e s=k-xe assumption k x assumed secret value user k x value changed e s_ =k_ -x_ e users schnorr signature e kept secret valid users knows respective k x values reveal different k x values selected z_ q assumed valid users modification secure deliver different values e time,signature hash-signature,hash signature
254,possible employ brute force methods encryption scheme known,lets say presented encrypted string bits text information necessary apply brute force methods decrypting string cryptanalyst approach case lets assume conditions encryption forced reasonable time frame,cryptanalysis brute-force-attack,attack force brute cryptanalysis
255,questions hash functions,let secure hash function e.g sha256 possibile find h m1 given h m1||m2 length m1 and/or m2 exact block size hash bytes sha family hashes,hash,hash
256,fhe block ciphers usage,fhe implementation aes simon speck except speed testing amortized meaningful usage mitigating form side channel analysis intel amd arm implement algorithms secured known side channel attacks cache attacks software versions meaningful usage fhe block ciphers,aes homomorphic-encryption side-channel-attack simon speck,aes simon speck encryption homomorphic attack side channel
257,trapdoors lattices,refer article https //eprint.iacr.org/2011/501 focus bit modified algorithm runs follows understanding given n m\in \mathbb q=2^k distribution \mathcal algorithm chooses uniformly random matrix \overline \mathbf \in \mathbb z_q^ m-nk matrix \mathbf r \in \mathbb z_q^ m-nk \times nk \mathcal outputs matrix \mathbf a= \overline \mathbf \| \mathbf g \overline \mathbf \mathbf r \in \mathbb z_q^ trapdoor \mathbf r \in \mathbb z^ m-nk\times nk \mathbf g public \overline \mathbf derived \mathbf \mathbf \overline \mathbf \| \mathbf a_1 obtain \mathbf r important due \mathbf r contains information short basis \mathbf treated private key \mathbf public key,lattice-crypto trapdoor,lattice crypto trapdoor
258,rsa bit forge new matching signature chosen message,rsa signature scheme 1024-bit key know following public n public exponent e=3 lot signatures summary compute signature md5 hash calculated collection byte textbook rsa private key function applied verification procedure signature check s^e\bmod n md5 hash alleged message teacher give signature question someone give advice find practical way find new matching signature chosen message,rsa public-key signature attack,attack signature rsa key public
259,practical uses machine learning cryptography,go study masters machine learning data mining high performance computing become interested cryptography taking dan boneh cryptography course coursera.com wondering practical applications machine learning cryptography quick google search seem much wondering someone knows something first impression machine learning techniques used learn inverse function cipher passphrase given enough plaintext/ciphertext pairs sure capable things neural networks learning functions separable,encryption cryptanalysis,encryption cryptanalysis
260,non-commutitive nonassociative algebraic structures cryptography,cryptographic algorithms primitives developed studied make use non-commutative non-associative algebraic structures quaternion integers octonion integers seems many structures preserve things make useful cryptography trapdoor nature multiplication example removing tools used attack symmetries exploited commutativity associativity several structures non-commutative non-associative many features unique factorization domains hurwitz quaternions integers studied conway smith surprise learn structures similar properties enough integers familiar broken symmetries make resistant cryptanalytic attacks obvious utility think using quaternion octonion based unique factorization domains rsa many cryptographic systems use objects integers see extended alternative structures downside see hidden congruence relation able exploited exist integers cryptosystems use alternatives integers,number-theory,number theory
261,openssl logs showing keyblock length bytes bytes,decrypting tls encrypted data wireshark using openssl tls1.0 version tls logs provides complete key block size bytes.now moved version key block size bytes only.anybody please help ... thanks advance,encryption aes diffie-hellman tls openssl,tls aes hellman encryption openssl diffie
262,private keys multiple devices,architecture user multiple devices phones needs broadcast payload devices channel devices listen receive payload need encryption messages devices phone create private/public key server use public key send encrypted messages solve problem devices mechanism private/public wrong appropriate case user ssh devices exchange data ... encryption protocol chosen believe appropriate case let know,rsa aes keys,keys aes rsa
263,integrity compromised hash modified,aware hashing user verify integrity cryptography query hashing suppose man middle attacker manipulates data creates new hash running manipulated data using hashing algorithm becausehashing algorithms universal algorithms send manipulated data receiver.when receiver runs manipulated data gets hash hash created attacker integrity verified actual data manipulated/modified integrity compromised possible possible eliminate problem solution regards ac,hash sha-256 sha-1 md5 integrity,sha hash integrity md5
264,length field sha-512 padding,using sha-512 message determine padding field length field determine length field think padding length field instance 1919-bit message padding field zero length field,padding sha-2 sha-512,padding sha
265,crypto usb devices pin/password stored,looking security cryto usb drives storing x509 certificates possession read/written using microsoft crypto apis reads/writes device prompts pin changed using ui installs device wondering stored/used device store pin device pin used generate symmetric encryption key used encrypt contents device right pin allow read device pin available device wondering standard way device vendors pkcs standard says device tamper-proof environment protected memory store private sensitive objects device encrypt objects master key derived user’s pin particular mechanism protecting private objects left device implementation clear tamper-proof environment protected memory case usb crypto device,passwords pki,pki passwords
266,twofish key length,using twofish say bit key difference using bit bit keylength bit significant digits key allo zero cases keylen parameter matter,twofish,twofish
267,safe md5 digest,heard md5 broken possible engineer collisions use say sha256 problem sha256 digests come function mdsha input return md5 sha256 input retain md5 digest lengths malicious collisions scheme sound,hash collision-resistance sha-256 md5,collision md5 hash resistance sha
268,simple xor secret key using dhe secure,client server given generator bit prime time clients hardcoded generate private exponent send result generate secure key done insecure channel simple diffie-hellman exchange step sent packet encrypted simple xor block cipher secure key bytes case long block way encryption secure much ways simple use much resources,encryption block-cipher diffie-hellman xor,xor encryption cipher diffie hellman block
269,encrypting passwords,using android keystore generate key protected fingerprint authentication key used encrypt secrets case want encrypt user password needed access app contents strong letter-number-special-characters password. encrypted password stored app preferences preferences public consider secure storage assuming attacker access encrypted password like little possible password thing comes password length length encrypted text seen password characters hide appending random text fixed length text passwords n characters n high serious issues best practice encrypt user passwords,encryption passwords,encryption passwords
270,proper formatting symmetric algorithm secret key,given description rfc sec value formulas derived session key follows first session key prefixed one-octet algorithm identifier specifies symmetric encryption algorithm used encrypt following encrypted data packet two-octet checksum appended equal sum preceding session key octets including algorithm identifier modulo value encoded described pkcs block encoding eme-pkcs1-v1_5 section rfc3447 form value used formulas see section document notes openpgp’s use pkcs guess pronoun passage means proper way format description seems vague everything goes eme-pkcs1-v1_5-encode input k length octets key modulus message encoded octet string length mlen mlen k output em encoded message octet string length k error message length checking mlen k output message stop generate octet string ps length k mlen consisting generated nonzero octets length ps least octets concatenate ps message padding form encoded message em length k octets em || || ps || || m. output given data elgamal modulus p bits octets symmetric key algorithm aes128 secret key checksum thought random_non_zero_data try decrypt data using real pgp program says key checksum failed get contradictory data pgpdump sym alg byte checksum bytes pkcs-1 block type tried random_non_zero_data didnt work exception decrypting secret key correct getting,implementation pgp,implementation pgp
271,sha1 hash functions contain quotes,feel foolish asking hash generated sha-1 encryption methods possibility containing quote characters escaped attempting make non-mysql database hold values hashes aware secure option holding things passwords private endevour fun planning store tables data json files need know need escape characters storing data,hash sha-1,sha hash
272,possible pick ed25519 public key,possible generate ed25519 keypair similar public key keypair fooling casual visual comparison hard solving sha-512 discrete logarithm problem,public-key signature ed25519,ed25519 public key signature
273,format preserving encryption suitable use words names,possible use fpe encrypt names language words order preserve length format keeping characters certain range a-z a-z way think moment reduce character decimal value encrypt seem secure character map value time,format-preserving,preserving format
274,looking cryptographic secure hash algorithm produces identical root hash sliced hash list,scenario similar described wikipedia hash list twist looking secure hash function create root hash file matter file chopped individual hashes list e.g case file divided parts hash list consists hashes parts root-hash computed hashes case file divided parts hash list consists hashes computed parts root hash computed hashes file want root hash doable restrictions number size file parts edit specific use case system stores files users large files sent stored smaller chunks control way files split chunks chunk encrypted beforehand client accompanied hash unencrypted content like know users upload file allows optimization know content file compute hash whole file using individual chunk hashes achieve,hash convergent-encryption,encryption hash convergent
275,real-world e-voting systems use paillier cryptosystem,lot theories paillier cryptosystem references e-voting real-world e-voting systems use paillier cryptosystem,reference-request paillier voting,paillier voting request reference
276,explanation parameters used ecc,difficult time finding clear explanation parameters used elliptic curve cryptography know certain p number order given field particular curve uses know k used secret key q= q_x q_y public key playing pages seeing contents file letft confused importance p differ q b change depending key question held constant curve function n seems less value p g order curve seed fit number encrypted done multiplying q extract coordinates q compact form used certficates,elliptic-curves,curves elliptic
277,many bits plaintext required verify stream cipher key,stream cipher n -bit internal state many bits known required confirm particular key key believe least n -bit plaintext reasoning n -bit state allow generate different key-streams assuming perfect bijection first n -bits correct,stream-cipher known-plaintext-attack,known plaintext attack cipher stream
278,analysis dghv security,want know security dghv breached using oracle binary gcd study paper homomorphic encryption integers able understand section theorem fix parameters ρ ρ′ η γ τ homomorphic scheme section polynomial security parameter λ attack advantage ε encryption scheme converted algorithm b solving ρ η γ -approximate-gcd success probability least ε/2 running time b polynomial running time λ understand subroutine learn-lsb z pk binary gcd following,encryption homomorphic-encryption,encryption homomorphic
279,block cipher algorithms variable block lengths,rijndael supports block lengths aes rijndael algorithms support variable block lengths rijndael unique regard,block-cipher symmetric blocksize,symmetric blocksize cipher block
280,cryptographic operations implemented using montgomery method,need implement cryptographic operations starting curve nistp256 told implement using montgomery method read pfd http //saluc.engr.uconn.edu/refs/sidechannel/okeya00elliptic.pdf states order curve divisible curve order multiple mean curve implemented using montgomery method ways implement,elliptic-curves,curves elliptic
281,ecdsa compressed public key point uncompressed public key point,ecdh demo generate private key alice get p gives following public key point x ecdsa public key compression coordinates prepended x coordinate used compressed key based x9.62 compressed key given derive i.e uncompressed point,elliptic-curves dsa,curves elliptic dsa
282,dh key exchange end authenticated,know man middle vulnerability unauthenticated dh key establishment way negate use authenticate keys used verify signature end vulnerability edit clear referring fact authenticated party know talking thinking cryptographic vulnerability someone control machine unauthenticated end damage,diffie-hellman authentication key-exchange man-in-the-middle,hellman exchange middle authentication key diffie man
283,difference linear cryptanalysis differential cryptanalysis,main difference linear cryptanalysis differential cryptanalysis example relation des,des differential-analysis linear-cryptanalysis,cryptanalysis des linear analysis differential
284,storage private keys,building bitcoin web application require users assigned wallet adding funds account plan exposing public key user bitcoin address users use exchange bitcoin client send money address accounts credited wondering best method storage wallet private key web application needs know user wants spend coins event database breach attacker steal everyone private keys therefore money idea like feedback secure using phpass utilizes bcrypt salt hash password signup signup occurs generate bitcoin key pair mcrypt_rijndael_256 encode private key using user password encryption key users willing spend coins re-ask password uncover private key web application small price pay added security database breached attacker see bcrypted passwords mcrypt_rijndael_256 encoded private keys know decryption key update suppose public key follow private key database attacker replace public key unbeknownst user way asked question bitcoin beta less emphasis specifics general best practice question,elliptic-curves dsa bcrypt rijndael secure-storage,secure rijndael storage curves elliptic bcrypt dsa
285,trying understand mixcolumns hexadecimal matrix,trying read understand textbook exercise questions sample solution end textbook final answer clarify got result trying question successful help appreciated questions show value state mixcolumns \begin d7\\f2 fe c5\\ab bmatrix answer final answer textbook \begin bmatrix b2\\55 e6 b8 bmatrix answer used path mentioned \begin bmatrix bmatrix \times \begin \\ f2 \\ \\ ab\end bmatrix \begin bmatrix \\ \\ \\ \end bmatrix f2 f2 f2 ab -- -- -- -- -- -- -- -- -- -- -- find value cell f2 xor ab -- -- -- -- -- -- -- -- equal,aes,aes
286,time pad considered chosen-plaintext attack secure,considering chosen-plaintext attack setting adversary access encryption oracle know considered secure use key ensure adversary uses key matter adversary uses encryption oracle end presented ciphertext corresponding plaintext queried adversary able decrypt know key making cpa-secure second train thought correct way think cpa setting thank,encryption cryptanalysis one-time-pad chosen-plaintext-attack decryption-oracle,decryption chosen encryption cryptanalysis plaintext attack pad time oracle
287,elgamal homomorphic encryption formula question,pubic key g q g h g group q prime g generator g thinking \mathrm enc r g^r h^r \cdot g^m,homomorphic-encryption elgamal-encryption,elgamal encryption homomorphic
288,file encryption authentication large files,cloud storage upload client want encrypt files read cloud service provider anyone gains access account like use standard format rolling crypto find anything want main problem want split large files parallel maximize bandwidth uploading part fails go upload part need encryption scheme allows encrypting parts file full authentication pass uploading avoided lot reading days came following scheme split file fixed sized kb blocks calculate sha-1 hash individual block append plaintext encrypt plaintext following hash using aes cbc mode random iv block similar rfc specifies symmetric encryption blocks provides authentication individual block protect file whole additional last block concatenation block hashes processed using technique rfc document clear provides modest security modifications thinking improvements use simple hash function replaced hmac document clear authenticate-then-encrypt secure cbc mode apply like keep authenticate-then-encrypt allows easy checking encryption key decrypting whole file happy last block repeats previous hashes hmac previous hashes suffice hope someone shed light practical security technique stumbled gcm seems want understand limit ~68gb encrypted given iv/key pair safe approach limit stay find good python library allows parallel encryption using gcm,aes hmac cbc gcm,cbc aes gcm hmac
289,elgamal cramer-shoup encryption given private key ciphertext public key determined,potential use case elgamal cramer-shoup encryption reverse visibility public private keys ciphertext private key published public key kept private data encrypted signed public key determined ciphertext private key known please demonstrate math,elgamal-encryption cramer-shoup,encryption cramer elgamal shoup
290,primes used generate rsa keys,confused keys rsa asymmetric encryption generated implications open communications textbooks say one-way function primes critical constraints -- primes generated get turned keys mean public key primes translated equivalent form example encrypt message someone public key one-way function broken third party decrypt message key generated prime prime go special process become key go encrypted message posted public forum sniffed wireless network etc one-way function mysterious third party mean message decrypted third party matter prime used wondering process whereby primes one-way function converted keys process regardless encryption used,rsa public-key prime-numbers,prime numbers rsa key public
291,cpa-security pseudorandom permutation encryption scheme,let f pseudorandom permutation define fixed-length encryption scheme gen enc dec follows input \in n/2 key k \in ^n algorithm enc chooses random string r \leftarrow n/2 length n/2 computes c f_k r||m show decrypt prove scheme cpa-secure messages length n/2 see decryption f_k^ -1 c r||m \rightarrow r_0r_1 ... r_ n/2-1 m_0m_1 ... m_ n/2-1 assuming n receiver knows extract first exact half right left ciphertext sequence cpa-security notice f_k deterministic r message ciphertexts c f_k r||m c f_k r'||m different r \neq r let q n polynomial number oracle queries r r probability \frac q n/2 negligible correct say something security parameter n feel missing something,provable-security chosen-plaintext-attack pseudo-random-permutation,chosen random pseudo plaintext attack permutation provable security
292,browser show user access website present certificate domain top level domain,example user tries access a.example.com server presents abc.example.com a.example.com sans list warning error,tls openssl certificates certificateless-crypto,tls certificates openssl crypto certificateless
293,crypto libraries/programs confidence,begun studying crypto thing learned implement crypto look using existing software libraries go implement something needs data security many options -- openssl mcrypt truecrypt crypt pycrypto bouncycastle ... know tried true regard crypto community scrutiny depends application implementation language data encryption generic answers common scenarios basic single-file encryption full disk encryption encrypted network communication audit source code naive say catch obvious vulnerabilities truecrypt high profile piece crypto software widespread calls public audit crypto software audited seems crypto software high confidence many eyes scrutinizing truecrypt openssl course usual disclaimer understand know vulnerabilities time nothing secure leaves high confidence low confidence measurement worth list high-confidence crypto libraries/software confidence well-defined list time-tested crypto libraries/software,encryption implementation file-encryption openssl,implementation encryption openssl file
294,best attack hfe cryptosystem,looking best know attack hfe cryptosystem reading paper degree regularity hfe found next claim joux demonstrated solve break systems case q small using grobner basis algorithm f4 experimental results imply algorithms finish degree order log_q highest degree polynomials need process degree order log_q conclude complexity algorithm n^ log_q using first hfe challenge i.e n q=2^n replace formula get log_ thinking make mistake replacing values hfe challenge interpreting wrong claim please help,post-quantum-cryptography,quantum post cryptography
295,constant-time comparison work,libsodium method comparing byte sequences constant time idea avoid early-out difference data detected heard thing imagined operating-system sleep operation round-up runtime algorithm threshold sounds inefficient,side-channel-attack libsodium,libsodium attack side channel
296,best hash nobody knows,confused companys use common hashes formulating password storage hash nobody knows solved hashing need know hash cbc undo hash keep secret thank,hash,hash
297,ciphertext size cpa-secure public-key encryption scheme,know cpa-secure public-key encryption scheme size ciphertext encrypting single bit superlogarithmic security parameter pk sk \leftarrow gen hold |enc_ pk b w \log n b \leftarrow problem took heuristic know big show,public-key chosen-plaintext-attack,chosen plaintext attack public key
298,kryptos k2 origin “abscissa” keyword,studying kryptos sculpture cryptographic puzzles k1 k4 similar palimsest keyword k1 keyword abscissa k2 determined brute-force better understand puzzle whole solve k4 important understand agent field discovered keywords suggestion keyword abscissa derived plaintext k1 reads subtle shading absence light lies nuance iqlusion given sort cryptic crossword reading give subtle shading ssa ... absence abs ... light speed light == c physics c ... lies nuance iqlusion standard sort anagram fun comes strong believable better theory,brute-force-attack,attack force brute
299,rsa encryption exponent,rsa public-key material e n encryption exponent e prime \phi n public key encryption algorithm resist cpa,rsa,rsa
300,ssl traffic inspection,decrypted session error certificate trusted certificate changed firewall cyberoam certificate public key got main public key cyberoam public key ssl traffic inspection authenticated encryption gcm,encryption tls,tls encryption
301,much weaker aes-64 aes-128,hard say exact qc specs let assume decent quantum computer using grover algorithm able half aes-128 keyspace aes-64 long bruteforce attack take aes-64 protected key aes-128 aes-256 able increase aes-512 maintain level security keyspace halved introduce possible vulnerabilities attack vectors addition attacks done qc,encryption aes cryptanalysis,encryption aes cryptanalysis
302,following rsa prng secure,requirement states generator withstand next-bit test consider following prng calculate next output x_i formula x_i x_ i-1 e\mod n see prng withstands state compromise extensions guess previous states given x_i e adversary compute future numbers generator considered secure,rsa pseudo-random-generator,random pseudo rsa generator
303,design secure key-dependent s-box,like design secure key-dependent s-box sure unsure difference design compared random s-box difference methods s-box construction “key-dependent s-boxes” “random s-boxes”,encryption algorithm-design s-boxes,encryption boxes design algorithm
304,multiply homomorphic encrypted value float number,know e homomorphic encryption multiply e integer b get e ab float number get e ab scheme support,homomorphic-encryption,encryption homomorphic
305,dsa require new k chosen restarted s=0,dsa algorithm used generate digital signature consists pair values r algorithm computes r first calculate s=0 says restart algorithm choosing different pseudorandom integer k starting point purpose digital signature r invalid s=0,dsa,dsa
306,encrypting big numbers small ones,new cryptography trying figure equation convert big number smaller reverse operation get big number problem equation use works fine numbers others want works encrypted data key data encrypted key course want difficult help,encryption,encryption
307,rsa ecdsa certificate sizes,table official sources compares size x509 certificates generated rsa starting bits ecdsa starting bits thanks support,rsa elliptic-curves reference-request certificates,reference request rsa curves elliptic certificates
308,ntru test vectors,find ntru test vectors research work stated test vectors available time esss1v2 standard ieee1363 appendix b mentions test vectors added future versions found get test vectors ntru,reference-request ntru test-vectors,test ntru vectors request reference
309,boneh/franklin identity based encryption tate pairing,boneh/franklin developed identity based encryption scheme based pairing algorithm standardised ieee p1363.3 know algorithm implemented type tate pairing find paper standard described anyone know good reference kind standard ieee iso ansi etc,elliptic-curves pairings identity-based-encryption,based encryption curves elliptic identity pairings
310,unsafe share parts password,best way ask question concrete answer set specific example example interested reading consider friend alice several ~5 hard drives encrypted truecrypt alice using aes 256-bit rounds ripemd-160 see script mounting different drives -i guess lazy wants type password course disk salted etcetera script figure password drive comes concatenating common string drives fixed string set script different drive know length common string user typed fixed strings 6-10 characters long let assume know common part password know fixed part disk see script question afraid diving explaining mathematical reason- insecure fact uses common string attack flaw know fixed part hard drive knew begin common part value unknown,aes ripemd,aes ripemd
311,strength md5 finding duplicate files,lot duplicate file finder applications using md5 algorithm strength md5 terms searching duplicate files hard disk flash driver storage device,hash md5,hash md5
312,total effective key length aesx-192,aesx-192 block cipher similar desx des replaced aes aes key size bits compute total effective key length aesx-192,aes des desx,aes des desx
313,convert projective jacobian co-ordinate ecc,small project using elliptic curve cryptography doubt convert projective jacobian coordinate system using affine conversion elliptic curve cryptography stuck point…,elliptic-curves,curves elliptic
314,using related pair cryptographic keys open/seal plaintext,using curve25519xsalsa20poly1305/fn.seal sodiumoxide crate written rust language wrapper libsodium c library function calls crypto_box_curve25519xsalsa20poly1305 libsodium library rust code look something let pub_key sec_key :sodiumoxide :crypto :box_ :gen_keypair let nonce :sodiumoxide :crypto :box_ :gen_nonce let data vec // plain-text // cipher-text let encrypted :sodiumoxide :crypto :box_ :seal data nonce pub_key sec_key println encrypted encrypted assert data encrypted much security concern use related key-pair public secret key pair generated crypto_box_curve25519xsalsa20poly1305_keypair calling function regarded potential weakness given intend encrypt decrypt know better use symmetric encryption case learning purposes – security risk,encryption public-key libsodium,encryption public key libsodium
315,verify subset hashes hash list,need verify couple hashed sha256 integers list hashed integers message list divided groups plain integer data message hashes signatures looked batch verification seems aim check signature message merkle tree closest found wanted know best approach apply scenario,hash hash-signature,hash signature
316,obtaining key using ice algorithm,text file processed snow steganography tool uses ice encryption know key enable decrypt retrieve message hidden tools available worked help retrieving key edited asking ways changed tools,brute-force-attack dictionary-attack steganography,attack steganography force brute dictionary
317,nonce encrypt everything step needham-schroeder,protocol outline looking source foundations computer security lecture needham-schroeder protocol \begin array ccl \to \colon b n_a \\ \to \colon \left\ n_a b k_ ab k_ ab a\ k_ bs \right\ k_ \\ \to b \colon k_ ab a\ k_ bs \\ b \to \colon n_ b k_ ab \\ \to b \colon n_ b -1\ k_ ab \end array n_a n_b nonces questions need nonce n_a step encrypt everything step send message k_ k_ ab || k_ bs k_ ab send k_ ab b,public-key authentication needham-schroeder,schroeder authentication public key needham
318,storing rsa private key,developing application users generate pair rsa keys order achieve secure communication server clients able communicate sending signatures proving authentication pgp use diffie-hellman scheme aware techniques storage private keys thought enciphering aes-256 asking user alternative password using personal/client password risk gets compromised attacker counts clients private key ciphertext somehow thinking https //en.wikipedia.org/wiki/zeroisation ciphered private key delete memory needed read info tpm afraid concerns secure hardware equipment devices based vendor signature verification booting want know best way storing private keys clients computer store server,encryption rsa keys,keys encryption rsa
319,nist closed — negative impact future cryptography,usa national institute standards technology nist shut poor fiscal situation usa text site reads nist closed nist affiliated web sites available due lapse government funding national institute standards technology nist closed affiliated web sites unavailable regret inconvenience national vulnerability database nist internet time service web sites continue available limited number web sites available posted www.nist.gov operations resume get updates nist operating status calling 975-8000. conferences events scheduled postponed cancelled nist reopens nist events need rescheduled access nist web sites resumes please see conferences events http //www.nist.gov/allevents.cfm list updated information specific events screenshot nist website 2013-10-02t12:00:00z positive side imagine people coming crypto.se result anyway… tempting want avoid asking opinions going ask reliable trustworthy nist looking fact government funding huge impact question remains impact closure future cryptography think crypto-development,standards nist,nist standards
320,openssl ecdhe show actual curve used,using openssl s_client -host myserver.net -port see negotiated using ecdhe session key exchange ssl handshake read bytes written bytes -- new tlsv1/sslv3 cipher ecdhe-rsa-aes256-gcm-sha384 server public key bit secure renegotiation supported compression none expansion none ssl-session protocol cipher ecdhe-rsa-aes256-gcm-sha384 client server use openssl version openssl feb get list available builtin curves using openssl ecparam -list_curves find elliptic curve used session completeness tls handshake messages relevant curve negotiation real-world session using openssl command given thomas clienthello tls handshake length clienthello fb d4 f4 fe d1 e0 e0 db da f4 ac dc ec a0 c0 c0 c0 c0 c0 c0 c0 c0 a3 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 a2 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff serverkeyexchange tls handshake length serverkeyexchange d7 ed f4 ...,elliptic-curves diffie-hellman tls openssl,tls hellman openssl curves elliptic diffie
321,diffie-hellmangroup1-sha1 used diffie-hellman,ssh diffie-hellmangroup1-sha1 used diffie-hellman words hash function used,diffie-hellman ssh,diffie hellman ssh
322,using gmac authentication encrypting message,new cryptography sample gcm mode operation pfb code cipher c cipher.getinstance aes/gcm/nopadding final int blocksize //c.getblocksize final byte ivdata new byte blocksize system.out.println iv string ivdata final securerandom rnd securerandom.getinstance sha1prng rnd.nextbytes ivdata system.out.println iv +new string ivdata /** */ gcmparameterspec params new gcmparameterspec blocksize ivdata securerandom sr new securerandom byte aeskey messagedigest.getinstance md5 .digest som3c0o7p s5 .getbytes byte ciphertext byte head header information .getbytes data data encrypt .getbytes sr.nextbytes aeskey secretkeyspec sks new secretkeyspec aeskey aes c.init cipher.encrypt_mode sks params c.updateaad head ciphertext c.dofinal data system.out.println done new string ciphertext c.init cipher.decrypt_mode sks params c.updateaad head ciphertext c.dofinal ciphertext system.out.println done new string ciphertext need authentication using gmac authentication using gmac encrypting/decrypting pointers suggestions helpful,encryption hash symmetric mac gcm,symmetric encryption mac gcm hash
323,differences x9.31 rsa operation pkcs rsa operation,nist older standards mention pkcs rsa algorithms x9.31 rsa algorithms differences x9.31 pkcs v2.1 regards key pair generation signature generation encryption applicable,encryption rsa signature key-generation,generation encryption rsa key signature
324,difference single-pass two-pass macs,trouble understanding count passes come constitutes pass context message authentication codes single-pass macs achieved,mac,mac
325,generation strong primes,seems pretty difficult find large bits strong primes least primes p p-1 large prime factor information regarding distribution strong primes vs. primes gnu library generates strong primes rsa thanks boaz,rsa public-key prime-numbers,prime numbers rsa key public
326,implementing modes operation hash function,possible implement modes operation ecb cbc ofb cfb ctr hash function,cbc ctr ecb ofb cfb,ofb cbc cfb ecb ctr
327,help describe/identify challenge-response protocol/algorithm,area expertise reverse engineering embedded systems cryptographic systems involves key recovery exploiting implementation asked reverse engineer simple windows executable used part challenge-response protocol used intruder alarm systems easy like assistance describing protocol/algorithm look security system protocol protocol designed stop users resetting alarm contacting alarm receiving centre alarm triggered message displayed contact arc quote called quote code digits long know chosen appears random user calls receiving centre informs quote code alarm receiving centre inputs quote code piece software decoder returns numeric digit reset code user informed reset code inputs alarm accepted alarm disarmed alarm alarm receiving center share secret number 0-255 called version superficial level alarm alarm receiving centre resetcode f quotecode version quotecode resetcode integers range 00000-99999 version number 0-255. algorithm implementation basic implementation algorithm used generate reset code given quote code vector top altered rest taken data vector def generate_reset quote version tens reset j result j offset version tens quote j result result vector offset tens tens j j reset.append result return reset print generate_reset quote version=131 run several simulations looping combinations inputs noted following coverage reset codes given version number quote codes ~63 means higher chance guessing correct reset code randomly given quote code reset code time single valid version number pairs quote reset codes needed derive version number version secret result questions hope vague broad call type algorithm looks hash key make mac specific implementation name looks roll vendor uses phrase military grade glaring issues expecting someone full analysis pointers great gut feeling secret version number provide adequate secrecy,cryptanalysis challenge-response,challenge response cryptanalysis
328,need understanding rsa public key exponent,new cryptography domain try build understanding rsa key pair generation doubt rsa public key exponent value exponent value prime non prime numbers getting proper answer someone useful link please help share regards nikhil,encryption,encryption
329,sent initial communication kerberos,user wants communicate user let say alice bob sent network initial communication alice uses kerberos client enters password username something clear send message containing time username hash password generated session key kerberos client authentication server send message containing time username encrypted alice password encrypted session key,encryption authentication kerberos,encryption authentication kerberos
330,existence map \phi \mathbb z ^* \mapsto \mathbb f,map group \mathbb z ^* n composite number product equal size secure prime numbers p q finite field \mathbb f x \in \mathbb z ^* polynomial representation x \in \mathbb f,number-theory,number theory
331,better ecdhe tls,supports tls sure something better cipher group aiming best security tls_ecdhe_ecdsa_with_aes_256_cbc_sha tls_ecdhe_rsa_with_aes_256_cbc_sha tls_ecdhe_ecdsa_with_aes_128_cbc_sha tls_ecdhe_rsa_with_aes_128_cbc_sha tls_ecdhe_ecdsa_with_rc4_128_sha tls_ecdhe_rsa_with_rc4_128_sha tls_ecdhe_ecdsa_with_3des_ede_cbc_sha tls_ecdhe_rsa_with_3des_ede_cbc_sha chose ciphers ecdhe perfect secrecy speed important secure important ciphers used java application retrieving data https website doubt due fact cbc ciphers vulnerable beast attacks,elliptic-curves diffie-hellman perfect-secrecy,perfect hellman curves elliptic secrecy diffie
332,input value dpa non-constant,wondering anyone help following problem let assume attacking first subbytes operation help differential power analysis attack dpa attack need know plaintext order create hypothesis used power model case hamming weights relationship simulation real power traces calculated correlation coefficient understandable side stated known input value constant yield result thing wondering came idea – case values constant – hamming weights hypotheses real traces vary power consumption applying correlation coefficient lead correlation hence yielding result assumption correct thinking wrong direction research subject able find right answer solution,aes cryptanalysis dpa,aes dpa cryptanalysis
333,compared gcm xts modes secure h xor r1 e r2 r1 message confidentiality integrity,let r1 r2 byte random values let h hash r1 r2 message length r value provided e r2 r1 message operating chaining mode known weaknesses scheme aims provide confidentiality integrity hash hmac following presented succession h xor r1 e r2 r1 message verification involve decrypting shared key arrive r1 xoring first part arrive calculated h verifying h agrees hash value point processing remainder message takes place,encryption modes-of-operation gcm xts,encryption operation gcm modes xts
334,probability input output aes,note assuming entering key plaintext formatted manner output encrypted text probability enter key ends exact output aes-256 encryption probability enter plaintext pre-encryption message ends exact output aes-256 encryption,aes cryptanalysis keys rijndael,keys rijndael aes cryptanalysis
335,time pad cipher secure,program made encrypting text files uses time pad encrypt files know holes program vulnerability time pad secure import os q q == e raw_input file encypt open file encryption open e r o1 o.read plain text encrypt quick brown fox jumps lazy dog' plain o1 measure length plain text f3 len plain generate random chacters text a1 os.urandom f3 makes random characters tuple format b list a1 b2 list plain plain gives ascii value charters l ord c c a1 ord c c b ord c c plain adds random digits plain text c map sum zip b uses modular arithmetic sum greater x=c z x z.append y-256 =256 z y-256 x converts sum charter form cipher_text chr z makes folder files base1 os.path.basename e base2 base1 makes folder output p /users/kyle/one_time_pad/ +base2 print p os.path.exists p print os.mkdir p key a1 makes file containg key p p f2 p+ key.txt print f2 os.path.exists f2 f1 file f2 w f1 open f2 w f1.write key f1.close else f1 file f2 w f1 open f2 w f1.write key f1.close makes file containg cipher text f3 p+ cipher_text.txt os.path.exists f3 f1 file f3 w f1 open f3 w f1.write cipher_text f1.close else f1 file f3 w f1 open f3 w f1.write cipher_text f1.close f4 p+ encrypt.py encrypt1 open /users/kyle/encrypt.py r encrypt encrypt1.read os.path.exists f4 file f4 w f1 open f4 w f1.write encrypt f1.close else f1 file f4 w f1 open f4 w f1.write encrypt f1.close f5 p+ decrypt.py encrypt1 open /users/kyle/decrypt.py r encrypt encrypt1.read os.path.exists f5 file f5 w f1 open f5 w f1.write encrypt f1.close else f1 file f5 w f1 open f5 w f1.write encrypt f1.close print code use decryption import os q q == opens text converts decimal cipher raw_input cipher text cipher1 open cipher r cipher2 cipher1.read cipher3 ord c c cipher2 opens key coverts decimal key raw_input key key1 open key r key2 key1.read key3 ord c c key2 subtracts key cipher3 b key3 c map lambda x x -x zip b prints decrypted plain text decrypt map chr c makes decrypted output path1 raw_input folder name plain_text.txt path2 path1 name os.path.exists path2 f1 file path2 f1 open path2 f1.write decrypt f1.close else f1 file path2 w f1 open path2 w f1.write decrypt f1.close print,one-time-pad,pad time
336,rsa cpu deal huge modulus bits,whilst understand rsa algorithm works understand cpu operates needs use mod function huge number n example n bits c m^e \mod n essence question cpu deal huge modulus,rsa implementation cpu,implementation rsa cpu
337,symmetric key encrypted server public key secure,trying implement lightweight secure protocol communicating trusted parties consider following scheme alice wants establish secure two-sided channel bob alice knows bob public key reliable source generates random symmetric key encrypts bob public key sends result bob untrusted channel bob receives message decrypts private key uses symmetric key found write alice share symmetric key alice bob use authentication scheme verify identities case mallory intercepts alice message able obtain alice symmetric key forge bob public key known mallory unable authenticate fail security drawbacks approach thought generating pair asymmetric keys using symmetric session keys message gpg-style former seems resource efficient,public-key symmetric key-exchange,symmetric public key exchange
338,safe aes-cbc aes-cmac using key,similar question using derived key cmac answer least situation need transfer data data variable length padded 16-byte blocks course encrypt using aes-128 cbc mode done first prepend data last bytes previous ciphertext sent append data needs round byte block encrypt plaintext looks random_16_bytes_as_iv data padding calculate aes-cmac entire ciphertext using key used encryption append ciphertext transmit receiver transmission looks ciphertext cmac receiver receives verifies aes-cmac decrypts discards bytes iv appended 16-byte block padding suggested use aes cbc mode cmac pet-project working acceptable implementation encryption system wanted check right way pet-project least give concerns bolded please note bytes prepend aes-cmac preious transmission bytes use last bytes actual ciphertext matter known previous transmission ...,aes cmac,cmac aes
339,enciphering messages aes ctr mode need different key message,written program run ctr mode keys bits checked gives correct results data given section f.5 http //csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf program chooses different nonce message enciphered need different key message single key differing nonce provide security needed,aes,aes
340,acceptable implementation encryption system,building open source hardware system used control things internet system consists base station modules use wireless communication exchange data come point need protect transmitted rf data re-transmission decryption need protect system nobody pose base station send rf packets module example turn lights unlock door details data needs protected message bytes reduced bytes leave room proper mac format message protocol known public message contents known public simple command turn-on command turn-off command future modules contain data kept secret potential eavesdropper messages transmitted constant rf activity project implemented microcontrollers limited amount ram entire thing flash memory program much room state-of-the-art encryption algorithms hash generation functions mac limitation data transferred bytes packet data split multiple packets re-assembled receiving side bytes work specifications current implementation messages encrypted using arc4 key arc4 bytes long key used maximum transmissions minutes rf no-activity whichever comes new key generated module encrypted sent base station decrypt data key bytes appended byte sync incremented encryption solving vulnerability re-transmissions rollover byte starts 0-255 end makes key arc4 bytes different transmission encryption process bytes unencrypted data message padded sync byte last byte final arc4 key padded crc-8 checksum calculated previous bytes resulting bytes encrypted using current arc4 key bytes sync byte crc-8 checksum combination sync byte used mac decrypting side packet decrypted using current key+sync sync byte decrypted packet expected used decryption crc-8 calculated entire decrypted package received good questions think smart way implement mac something implement take bytes unencrypted data space reduce application data space bytes make space improved safe current implementation system worried someone inject rf packets decrypted modules matched sync crc-8 way analyze hope give much irrelevant information post first time implement kind encryption post se update decided abandon design safe thanks poncho suggesting alternative found cmac aes implementation avr411 document targets hardware using find document searching google,encryption hash mac,encryption mac hash
341,multiplying g^x g^y possible,computational diffie-hellman problem states cyclic group g order p generator g hard find value g^ xy given g^x g^y easy x known easiest way compute discrete logarithm g^x g^y calculating g^x ^y g^ xy big misunderstanding group theory modular operations part possible calculate product g^x \cdot g^y regular group operation multiplication modulo p difficult result wrong,diffie-hellman discrete-logarithm group-theory,logarithm hellman theory group discrete diffie
342,key hmac keys separate untrusted parties,problem follows parties like hmac message key keys known parties trust created random key hmac result attackable third party necessary final key substantial entropy party supply optimistic world parties generate secure 256-bit random numbers key message less optimistic world party generates secure 256-bit random number party gives bits data entropy due laziness malice parties lazy malicious worst case accept failure impossible avoid assume problem least party sees good key best interest best way structure hmac call use keys key weak means strength lower-bounded good key sabotaged due sort subtlety ideas hmac message key1 || key2 hmac hmac message key1 key2 hmac message hmac key1 key2 starting feel problems subtle issue unaware straightforward choices edit discussion feel need include important details party hand random bit string party party generate random bit string party responsible generating hmac party opportunity reject result parties know secrets least party cares strong secret possible party malicious lazy,keys hmac,keys hmac
343,secure use password aes key,developing steganography app user encrypt file audio file user enter password protect hidden data password converted bit key hidden data encrypted using aes wondering secure using password aes key,aes key-derivation steganography,aes steganography derivation key
344,password migration strategy secure,want upgrade security existing databases users authentication tokens purpose making sure database stolen attackers able guess weakest passwords reasonable period time know much people choose password password think protect people use words bigger dictionary e.g regenerating databases existing authentication tokens stored md5 salt password salts weak databases use better hashes salts strong resist attacks today computers want wait people login update database entries plan take output hashing algorithm password system using feed bcrypt store result new authentication token e.g bcrypt md5 salt password anyone see weakness procedure seems worse using bcrypt password new_secure_salt know better rely evaluation cryptographic protocol recommend procedure new applications method best come securing entire database stored passwords way transparent users,cryptanalysis protocol-design passwords,design passwords protocol cryptanalysis
345,rsa certificate owner issuer line meanings,apologies question right place looking rsa certificates android apk .rsa files trouble deciphering letter combinations owner/issuer lines ex cn ou l st c l st c location state country think others,rsa,rsa
346,public key cryptography public key encrypts decrypt,understand basics public key cryptography party keys public encrypts private decrypts figure public key encrypt decrypt private key decrypt understand possibilities anyone know operate,public-key,public key
347,timestamps verified,put input hash value comes output someone puts input hash function applied see hash original value stored database works remember trouble understanding timestamps used timestamp service univerisign sent file timestamp believe input file date using sha512 creates document signature done document example.pdf title testing document using service appears example.pdf title 04_02-2012 testing document comes called example.pdf.ers wich believe hash value prove validity document timestamped universign web answers universign uses timestamp protocol defined rfc standard use software compliant standard check timestamp seal mean different example.pdf document fake fake.pdf date written example.pdf security characteristic normal pdf document verification information stored example.pdf.ers think universign able gave proof document smart create fake proof document giving fake input including date got credentials organization case universign timestamps valid example.pdf.ers saved universign.eu database valid note question long specific tried answer formulating understanding verification timestamps,hash public-key signature timestamping,timestamping hash public key signature
348,diffe-helman exchange result,watched video khan explaining diffe-hellman exchange try example problem get time generator prime modulus base wikipedia related key exchange work example generator prime alice private number bob private number alice public number mod23 bob public number mod23 shared number mod23 shared number mod23,encryption diffie-hellman prime-numbers,prime encryption hellman numbers diffie
349,proof integrity authenticated identity-based encryption,authenticated id-based encryption benn lynn proof integrity section meaning guess-id assumed l_ empty b fails guessed id encryption select parameters s=e g g abc list l_ view independent correct forgery question random oracle users submit ciphertext identity decryption decryption oracle handled challenger,identity-based-encryption,encryption based identity
350,use pbkdf2 authentication decryption,want store hash authenticating password want use password decryption use pbkdf2 plan use different salts authentication decryption course authentication result decryption key appropriate/secure,encryption authentication pbkdf-2,encryption authentication pbkdf
351,exchanging keyspace message space prf,suppose secure prf f k \times x \to f x \times k \to defined f x k =f k x secure prf opinion exchanging keyspace message space effect security choosing random key key space choose key message space compute f sure intuition,provable-security pseudo-random-function,function provable security random pseudo
352,using secret key encryption authentication encrypt-then-mac scheme,weakness use single shared secret protecting messages using encrypt-then-mac scheme assuming system using aes-256-cbc sha1-hmac secret key operations intercepting messages attacker brute force secret key trying solve hmac decrypting first block ciphertext performing decryption single block aes-256 lighter operation performing sha1-hmac large message aes-256 ideal parallel brute-force attack use sha1-hmac hurt system approach sound attack taken consideration,hmac authenticated-encryption padding-oracle,padding encryption authenticated hmac oracle
353,determine iteration times using pollard rho method factoring,let say large number n=181937053 f x =x^2+1 know problem using pollard rho method find algorithm iteration times need factor number x_0 y_0,random-number-generator factorization,random number generator factorization
354,store combination multiple pass phrases,let assume phrases real password user generated real password impossible guess need authenticate user best theoretical way store encrypt attacker somehow gets encrypted pass phrase able decrypt phrases know brute force attacker break encryption best make easier attacker break encrypt symmetric algorithm store matter first phrase vulnerable dictionary attack combine example p1f1p2f2… phrase1=p1p2p3… phrase2=f1f2f3… encrypt way combined phrase vulnerable dictionary attack attacker use brute force sure way combine affects encryption algorithm specific encryption algorithm better vulnerabilities regarding combine get discovered analyse many examples encrypted combined pass phrases guessing way know analysing algorithm encryption algorithm encrypted pass phrases,encryption passwords,encryption passwords
355,relations rsa dlog factoring dlog,definition generalized diffie-hellman problem let large primes p given x x^a x^b n find x^ ab \pmod known reduction gdh problem rsa problem i.e finding m^e\pmod n known reduction gdh problem integer factorization given solves second problem mentioned find efficient algorithm solves gdh problem side-notes course reduction gdh dlog know reduction dlog integer factorization rsa problem known rsa problem limited e=2 i.e finding square roots modulo p reduced integer factorization non-interesting case general e afaik reduction known interested hear dh gdh dh problem gdh prime p semiprime n,rsa public-key diffie-hellman discrete-logarithm factorization,logarithm hellman rsa factorization discrete key diffie public
356,encrypt network adapter mac address get cipher text length,character network adapter mac address get result cipher text length,encryption,encryption
357,publish accumulator trapdoor keep secure,implementing camenish-lysyanskaya dynamic accumulator seems accumulator secure trapdoor unknown attacker risks fact given euler theorem forge element accumulated passes test v^x\equiv v^ x\mod\phi \mod v accumulator x \phi euler function x\mod\phi\equiv x_f forged x passes test care factorization publish \phi require acceptable integer x_ acc x_ acc a+\phi \phi means example input string user1 string hashed accepted interval \phi large defy collisions stop caring keeping \phi secret forged inputs fall specified interval discarded words valid integer congruent integer maps input user1 think feasible missing something obvious understand skipped something important field please ask clarifications,modular-arithmetic accumulators,modular arithmetic accumulators
358,challenge use challenge-response proof-of-work,order guard denial-of-service attacks want require clients work work fulfilling request talking client connects server sends challenge including piece data find bytes x hash challengedata x n beginning client finds x sends server verifies hash challengedata recv n zeros beginning actual request handled found different methods generate challengedata thing problems random bytes client exhaust server prng connecting brings square denial service current time day seems good idea know attacks string involving something dependent particular request hashcash order make sure evil connections dropped possible avoid handing anything request making sure client done work idea client much work server starts handling request constraints server stateless want save hashcash make sure spent want challenge client work pre-computed want know anything request stage authentication server sends recieves little data possible instance current time nanosecond millisecond precision depending hardware implementation bytes double 2^64-1 tries i.e 8-byte response enough resetting connection foreseeable future short properties challenge need generated data properties current time good usual ask something protocol-design reinventing wheel existing protocols know,protocol-design challenge-response proof-of-work,protocol challenge work design response proof
359,using hashed password shared secrets good bad idea,built system allowed users generate unlimited number email addresses storing db created addresses made address hmac signed message shared secret bcrypt hashed version account password e.g example.com security critical worked considering using strategy something little delicate question ... using hashed password shared secret good idea bad idea,hmac secret-sharing bcrypt,secret sharing bcrypt hmac
360,perform computation encrypted data,code performs symmetric encryption using aes algorithm go performing computation achieve homomorphic encryption import android.net.uri import android.os.bundle import android.support.v7.app.appcompatactivity import android.util.base64 import android.widget.textview import com.google.android.gms.appindexing.action import com.google.android.gms.appindexing.appindex import com.google.android.gms.common.api.googleapiclient import java.security.key import java.security.securerandom import javax.crypto.cipher //import javax.crypto.keygenerator import javax.crypto.spec.secretkeyspec public class mainactivity extends appcompatactivity private static key key private static string encryptationmode aes private static byte keyvalue new byte /** attention auto-generated implement app indexing api see https //g.co/appindexing/androidstudio information */ private googleapiclient client /** attention auto-generated implement app indexing api see https //g.co/appindexing/androidstudio information */ private googleapiclient client2 protected void oncreate bundle savedinstancestate super.oncreate savedinstancestate setcontentview r.layout.activity_main // original text string thetesttext test textview tvorig textview findviewbyid r.id.tvorig tvorig.settext \n original \n thetesttext \n // set secret key spec 128-bit aes encryption decryption secretkeyspec sks null try //securerandom sr securerandom.getinstance sha1prng //sr.setseed data used random seed .getbytes // keygenerator kg keygenerator.getinstance aes mainactivity.key generatekey // key.init sr //sks new secretkeyspec key.generatekey .getencoded aes catch exception e //log.e tag aes secret key spec error // encode original data byte encodedbytes null try cipher c cipher.getinstance encryptationmode c.init cipher.encrypt_mode key encodedbytes c.dofinal thetesttext.getbytes catch exception e //log.e tag aes encryption error textview tvencoded textview findviewbyid r.id.tvencoded tvencoded.settext encoded \n base64.encodetostring encodedbytes base64.default \n // decode encoded data aes byte decodedbytes null try cipher c cipher.getinstance encryptationmode c.init cipher.decrypt_mode key decodedbytes c.dofinal encodedbytes catch exception e //log.e tag aes decryption error textview tvdecoded textview findviewbyid r.id.tvdecoded tvdecoded.settext decoded new string decodedbytes \n // attention auto-generated implement app indexing api // see https //g.co/appindexing/androidstudio information client2 new googleapiclient.builder .addapi appindex.api .build private key generatekey key key new secretkeyspec keyvalue encryptationmode return key,aes homomorphic-encryption java,encryption aes homomorphic java
361,calculating n-gram lists spaces ciphertext,analysis block ciphertext message characters including spaces .now spaces need taken account performing digram trigram analysis space occurred character ciphertext take space account digram analysis come many single words,cryptanalysis,cryptanalysis
362,proper usage gcm nonce tls1.2,written program help bouncy castle c library monitoring traffic send client server found something find strange client sends application data using following ciphersuite tls_psk_with_aes_128_gcm_sha256 gcm nonce starts server sends data client sends data server sends nonce etc correct twice server respond,tls gcm nonce,tls nonce gcm
363,many:1 collision md5,reference answer stackoverflow read first paragraph answer find line many:1 mapping meaning collisions function produces smaller output capable inputting feed possible file md5 get ton collisions many:1 collisions many:1 mean different inputs hash outputs,hash collision-resistance md5 terminology,collision hash resistance terminology md5
364,possible run public-key servers storage sending countless valid public-keys,public-key servers accept valid public-keys refuse accept massive keys single ip zombies hacked qualified key server sync requests generating kinds public key quick i.e. ed25519 high-speed high-security signatures specifies fast signing software takes cycles sign message westmere signs messages second fast key generation key generation signing slight penalty key generation obtain secure random number operating system /dev/urandom linux costs cycles possible attack key servers massive valid frivolous public-keys continue work go offline refuse accept new public keys ban certain kinds key generating algorithms delete keys uploaded certain time requires registration captcha public-key server system designed kind attack edit werner koch submitted i-d use ed25519 openpgp idea accepted openpgp supported statistics https //sks-keyservers.net/status/key_development.php says openpgp keys total sources claims keys added daily maximum exception thousand day generating ed25519 public keys easy amount public keys small expected trillions amount pega-bytes occupy double keys day joke servers discard keys avoid garbage good keys wonder case negative amount keys added statistic means good keys discarded distributed attack time idea conclusion applies ecc curves idea rsa generating weak keys matter easy break wonder pgp servers survived juvenile field,rsa public-key key-exchange pgp ed25519,key exchange rsa pgp ed25519 public
365,creating custom way encryption class,trying make simple way encryption function uses substitute cipher encryption inverse substitution decryption want move substitution algorithm question follows things need look creating custom encrypt/decrypt algorithm link question code,encryption substitution-cipher,encryption cipher substitution
366,exchange shared key hardness assumptions,imagine p=np way functions exist people end shared key arbitrary length exchange public true rngs know talking worried mitm attacks someone sharing channel time pads people want get time pad third person check afterwards pad sending random bits seems way person send secure message third person shares otp send different layers added time unlayering afterwards see work solution make sides end key middle person way getting motivation cas act middlemen secure communication post-p=np world computer shipping cas otps,key-exchange authenticated-encryption one-time-pad,authenticated exchange encryption pad key time
367,performance checking image steganography technique,working image steganography lsb technique lossless compression performance measured psnr value higher psnr value greater performance standered input data size read paper mention performance mention data size suggestion size image working x extension .png pixel rgb color hiding bit data,steganography,steganography
368,build difference distribution table,studying differential cryptanalysis found metric measure resistance sbox use necessary build difference distribution table link table sobox s1 des build table aes sbox example,s-boxes differential-analysis,boxes differential analysis
369,calculate many trials need guess plain text simple p-box used make cipher text,bit input box use transposition process plain text given bits contains bits many trial,encryption cryptanalysis transposition-cipher,encryption transposition cipher cryptanalysis
370,unique decentralized id systems,familiar standard decentralized id system web trust e.g pgp keys normal web trust systems unable guarantee uniqueness — practical limit number public keys register aliases appear seperate individuals systems unsuited applications voting uniqueness paramount question id systems decentralized i.e trust single individual group time guarantee high probability given ids unique individuals,voting,voting
371,hmac-sha1 vs hmac-sha256,questions use hmac-sha1 hmac-sha256 message authentication much hmac-sha256 slower hmac-sha1 security improvements sha256 sha1 justify usage,hash hmac sha-256 sha-1 sha-2,sha hash hmac
372,different applications hash functions demand different properties hash function,strong cryptographic hash function general guarantee several properties including preimage resistance second preimage resistance collision resistance turns certain applications require subset properties others require table gives summary applications require properties stalling book someone give explanation properties required application example makes sense one-way passwords require preimage resistance want person compute password hash understand one-way passwords require collision resistance i.e. different passwords give hash impostor break anyone explanation different properties table authoritative textbook area stalling book,hash collision-resistance preimage-resistance 2nd-preimage-resistance password-hashing,hash resistance collision preimage password hashing
373,bad design reuse aes key,company work needs develop simple system client encrypt token transmitted client decryption performed server client transmits token machine performs crypto token external service integrity checking issue wrote code encrypts tokens using aes/cbc using key unique iv aware practical attacks aes large number known ciphertexts colleague insists break i.e get key decrypt stuff collecting large amount ciphertexts argues key client server correct,aes cbc key-reuse,cbc aes reuse key
374,reasonable length diffie-hellman safe prime,program uses following openssl function ... dh_generate_parameters null null ... create dh parameters later used hundreds key exchanges one-time keys used login details sent internet manual page says prime_len bits secure value bad feeling reading http //www.keylength.com/ correspond discrete logarithm key discrete logarithm group looking wrong place,diffie-hellman key-size,diffie hellman key size
375,dghv bootstrap recrypt cipherbit,implementing homomorphic crypto-system http //eprint.iacr.org/2011/440 using sage math get bootstrap done scheme appendix say apply decryption circuit expanded ciphertext z encrypted secret key bits σi thing understand decryption circuit requires modulo apply modulo cipherbit staying cipherworld using public key decrypt implementation using recrypt function understand,homomorphic-encryption,encryption homomorphic
376,implementing cbc encryption using decryption,implemented algorithm working end message backwards creates valid cbc ciphertext plaintext using block cipher decryption operation encryption operation bet described literature bad idea questions method/algorithm/construction called secure cbc implemented normal way normal rules cbc iv apply last ciphertext block wondering want encrypt message end exercise exploiting padding oracle attack dummy code running server,cbc modes-of-operation,cbc operation modes
377,understanding math rsa key derivation,reading key derivation rsa steps wiki select strong primes p q pq n \phi p-1 q-1 select e e \phi n coprime select ed mod \phi understand \phi n needed skip step say -- select e e n coprime work math somehow dependent e coprime \phi n clarify main question e needs prime phi n work prime n following poncho answer -- lets say want pick e prime n. example lets say edmod course e prime number spec say e prime appear \phi n chosen smaller n giving opportunity find e choose p-1 q-1 operation make result smaller n know missing something clicking hope explains,rsa,rsa
378,understanding elliptic curve encryption,hard time understanding elliptic curve encryption thing thing understand listing points curve mod p. suppose following elliptic curve y^2 x^3 \pmod find list points run x \leq solve know output following x solution mod x y^2 mod x y^2 mod x y^2 mod x y^2 mod points point infinity idea happening example x=1 solving becomes mod say x=1 trouble understanding point doubling using following algorithm compute \equiv -1 \pmod p new x x_3 m^2 x_1 x_2 \pmod p y_3 x_1 x_3 y_1 \pmod p seem work someone give example point doubling e.g following equation y^2 x^3 \pmod point p compute,elliptic-curves modular-arithmetic,modular curves elliptic arithmetic
379,time-space tradeoff attack breaking symmetrical cryptos,known techniques using time-space tradeoff speeding symmetrical crypto breaking kind rainbow tables speed breaking hashes using huge precomputed tables something similar possible symmetrical cryptos aes difference block stream ciphers regard get least head start brute forcing searching gigantic tables lot plaintext heads pre-computed,symmetric brute-force-attack,symmetric attack force brute
380,ecdsa public key generation,referring wikipedia page ecdsa-cert paper understand given \mathcal e \mathcal e b \mathbb f elliptic curve \mathbb f group g \in \mathcal e generator group i.e \exists n n\times g n order point g respect group choosen d_a\in n-1 private key q_a\triangleq n \times d_a public got key pair validation bob process see respect bounds q_a \neq trivial q_a \in \mathcal e trivial q_a\times understand last thing acquainted ec algebra comparing q_a\times n g seems thing conclude q_a=g false missing,elliptic-curves algorithm-design dsa,algorithm design curves elliptic dsa
381,public key private key exchangeable,get key pair rsa algorithm make private-key public keep public-key secret breaking security encryption signature,rsa public-key,rsa key public
382,constructs data-dependent swaps rotations cryptanalyzed,linear differential cryptanalysis seem suited constructs simple fixed structure boolean expressions ciphers incorporate swaps array elements indices swapped dependent dynamic cipher state others include rotations variable number bits case rc4 entire cipher state embodied permutation fixed set integers seem induce combinatorial explosion number expressions needed track bias system good thing side-channel challenges constructs stronger made fixed structures harder analyze math used attack/analyze,cryptanalysis rc4,rc4 cryptanalysis
383,prove hardness approximate-gcd problem,trying prove security system using hardness assumption approximate-gcd problem using contradiction i.e attacker able break scheme attacker able solve approximate-gcd problem stuck point proved complexity using brute-force approach proceed concrete complexity measure used contradiction,homomorphic-encryption provable-security semantic-security hardness-assumptions,semantic encryption homomorphic assumptions provable security hardness
384,key check value standard practice asymmetric cryptography,looking standard sound industry practice equivalent key check value applied private key public key algorithm ecdsa des keys practice worded e.g card personalization specification key check value purpose data used prove card/processor access specific des key value format binary bytes contents leftmost bytes result encrypting bytes zeros des key concerned notice definition wrong kcv defined anything knowledge kcv actual purpose interested guard wrong value key accidental deliberate participant scheme key rebuilt shared secrets simplicity assume xor components least participant cheat,public-key keys,keys public key
385,kryptos k1 origin palimpsest keyword,studying kryptos sculpture cryptographic puzzles k1 k4 understand keyword reverse-engineered using tableau brute-force computer processing sanborn said sections solved using pencil paper theories morse come good explanation tease palimpsest frustrated trying find kryptos yahoo group,brute-force-attack classical-cipher vigenere,force classical brute attack cipher vigenere
386,translation hash french,french presentation basic cryptography generation random numbers terms translatable seem find word hash cryptographic hashing french closest come gâchis means mess failure,hash,hash
387,crypto libary commutative encryption,want implement mental poker javascript toy program lead larger serious project research found massey-omura cryptosystem shamir three-pass protocol find implementations information sra scant anyone able shed light implement commutative encryption sra rsa know massey-omura/shamir library,rsa commutative-encryption,encryption rsa commutative
388,srp-6 calculation b include multiplier k,srp-6 b calculated b=kv+ g^b k=3 purpose k fixed srp-6a value replaced k h n g question srp-6,protocol-design passwords srp,design srp passwords protocol
389,questions oaep rsa,questions oaep rsa number bits pad chosen example sending byte message rsa-2048 unused bits byte split remainder bits pad zeroes r random bits pick number bits pad matter hash functions g h e.g sha-256 variables reference ones diagram found wikipedia article “optimal asymmetric encryption padding” question proper technique expanding shrinking data using hash functions use hash seed secure prng generate n random bits wrong,rsa padding oaep,padding rsa oaep
390,mov attack work,mov work used explained briefly know used,cryptanalysis elliptic-curves,curves elliptic cryptanalysis
391,implement key size,curiosity implement key size please explain understand expert,aes,aes
392,elliptic curve cryptography used compared rsa,ran elliptic curve crypto-systems introduction theory elliptic curves brown university elliptic curve cryptography wikipedia performance analysis identity management session initiation protocol sip ieee overview elliptic curve cryptosystems rsa.com seemed great alternative rsa de-facto cryptosystems used banking financial systems public key infrastructure certificates used someone explain done helpful comparison traditional rsa elliptic curve cryptology helpful begin advantage rsa established advantages elliptic curve shorter keys strong key rsa see ieee paper low cpu consumption low memory usage,public-key rsa elliptic-curves,curves elliptic public key rsa
393,prp representation size,studying block cipher substitution-permutation network construction realized uses several small pseudo-random permutations big saving memory reasons prp input/output n bits utilize \log memory saving full table \mathrm domain \to\mathrm range thought utilize n\cdot2^n,encryption permutation,encryption permutation
394,store key system source visible,customer access database ugh credit cards stored plaintext yikes amongst changes app applying encryption used rijndael algorithm choice struggling find correct approach storing encryption/decryption key access database source-visible provide decent security prevent someone grabbing database local access machine internet connected feel omst way missing vital piece jigsaw,keys,keys
395,difference ibe abe schemes,somebody explain simple words real life example light help limitations schemes etc,identity-based-encryption abe,encryption based abe identity
396,rsa decryption samples,working project client involves decryption data encrypted using rsa system question retains independent copies data-set copy encrypted different key scenario private keys gone want know anyone knows methodology use encrypted copies data identical padding determine original data-set help/thoughts/comments appreciated,encryption rsa public-key,encryption rsa key public
397,regular ctr mode vulnerable attacks,regular plain ctr mode vulnerable attack plan write program encrypt drive ctr mode wise aes better look diagram looks pretty solid question broad allow rephrase better ctr mode picture encrypt drive,aes ctr,aes ctr
398,meet-in-the-middle attack,meet-in-the-middle attack algorithm literature say secure des,3des meet-in-the-middle-attack,meet attack middle
399,schnorr identication protocol,schnorr identification protocol said honest verifier knowledge protocol imply work wondering case mean honest prover denied authorization misbehaved verifier,schnorr-identification,identification schnorr
400,generating keys hkdf diffie hellman agreement,order generate multiple session keys diffie hellman key agreement protocol trying use hkdf generate session keys hkdf algorithm uses extraction-expand procedure extraction procedure takes input salt source key case diffie hellman generated key know salt random non-secret value question establish random salt value entities set value applying hash function diffie hellman key salt hashfunction diffiehellmankey,key-derivation salt hkdf,salt derivation key hkdf
401,execution time hmac-md5 bit data using bit key cpu,need know execution time hmac bit data using bit key ghz cpu specify parameters machine ram operating system used etc,hmac,hmac
402,much successful distinguishing attack break attacked stream cipher,started reading recent cryptanalysis rc4 variants papers finished reading linear distinguishing attacks vmpc rc4a weakness rc4 family stream ciphers alexander maximov handles linear distinguishing attacks understand linear distinguishing attack used said differ cryptotext real random data understand proves related stream cipher broken successful attack used base attacks sure understand whole range consequences successful linear distinguishing attack successful linear distinguishing attack mean attacked stream cipher broken practical point view question popped mind scenarios alice bob guarantee eve get hands plaintext mistaking eve plaintext eve successful linear cryptanalysis imply attacked cipher used certain conditions correct know sane person implement broken cipher rc4 safer alternatives aes256 available… please think scenario theoretical using part question help understand full impact successful linear distinguishing attack means attacked ciphers successful linear distinguishing attack breaks attacked stream cipher fact guess question boils general question covering linear distinguishing attacks… distinguishing attacks count complete break practical perspective,cryptanalysis stream-cipher linear-cryptanalysis distinguisher,distinguisher cipher linear stream cryptanalysis
403,question definition secure prf,taking cryptography introduction course covering definition secure prf understand test goes follows challenger picks function f f \leftarrow \left\ \begin array lr b=1 k\leftarrow k f\leftarrow \left k \cdot \right \\ b=0 funs \left x \right \end array \right. funs x set possible prfs entire experiment defined exp\left b \right output adversary guess challenger chose function random secure prf defined conditions \left pr\left exp\left \right =1\right pr\left exp\left \right \right negligible words probability attacker result minus probability attacker result negligible adversary detection method returns imply cipher secure true missing,provable-security pseudo-random-function,function provable security random pseudo
404,openssl rsa many public exponents possible,like know possible set public exponent want openssl rsa limited possible exponents yes,rsa openssl,rsa openssl
405,arithmetic calculation problem quadratic arithmetic program,"reading pinocchio paper verifiable computation http //research.microsoft.com/pubs/180286/pinocchio.pdf paper hard considering calculation problem c_1*c_2+c_3*c_4 *c_5 similar figure paper denote c_1*c_2=c_6 c_3*c_4=c_7 c_6+c_7 *c_5=c_8 denote r_6 r_7 r_8 gate get c_6 c_7 c_8 value v_i r_6 r_7 r_8 vv value w vw vy use maxima find v_i w_i y_i degree p x x x-r_6 x-r_7 x-r_8 found p x denominator r_7-r_6 ^2* r_8-r_7 ^2* r_6-r_8 ^2 focus numerator let denote pn x x degree pn x degree 3-1 *2 h x degree i.e pn x =t x h_0+h_1*x h_1=\text coeff pn x x,4 h_0=\text coeff pn x -t x *x*h_1 x,3 pn x divisible x coefficients pn x -t x *x*h_1 x^2 x^1 x^0 say following items \text coeff pn x -t x *x*h_1 x,2 c_8-c_5* c_6+c_7+c_4+c_3+c_2+c_1 r_7-r_6 ^2* r_8-r_7 r_6-r_8 c_7-c_3*c_4 r_7-r_6 r_8-r_7 r_6-r_8 ^2 c_6-c_1*c_2 r_7-r_6 r_8-r_7 ^2* r_6-r_8 \text coeff pn x -t x *x*h_1 x,1 c_8-c_5* c_6+c_7+c_4+c_3+c_2+c_1 r_7-r_6 ^2* r_8-r_7 r_6-r_8 r_7+r_6 c_7-c_3*c_4 r_7-r_6 r_8-r_7 r_6-r_8 ^2* r_6+r_8 c_6-c_1*c_2 r_7-r_6 r_8-r_7 ^2* r_6-r_8 r_8+r_7 \text coeff pn x -t x *x*h_1 x,0 c_8-c_5* c_6+c_7+c_4+c_3+c_2+c_1 r_7-r_6 ^2* r_8-r_7 r_6-r_8 *r_7*r_6 c_7-c_3*c_4 r_7-r_6 r_8-r_7 r_6-r_8 ^2*r_6*r_8 c_6-c_1*c_2 r_7-r_6 r_8-r_7 ^2* r_6-r_8 *r_8*r_7 result seems suggest quadratic arithmetic program putting constrains c_6=c_1*c_2 c_7=c_3*c_4 c_8=c_5* c_6+c_7+c_4+c_3+c_2+c_1 constraint weird c_8=c_5* c_6+c_7 anyone help find reason appreciated following maxima code globalsolve true r6 r7 r8 vv vw vy vi =sum cv j *x^j j,0,2 wi =sum cw j *x^j j,0,2 yi =sum cy j *x^j j,0,2 solvepoly fn cn vn solve fni=vn fni=vn fni=vn cn i,0 cn i,1 cn i,2 display cn i,0 cn i,1 cn i,2 i:1 step thru solvepoly v cv vv solvepoly w cw vw solvepoly cy vy p x rat sum c *vi i,1,8 *sum c *wi i,1,8 -sum c yi i,1,8 x x-r6 x-r7 x-r8 pn x =denum p x times r7-r6 ^2* r8-r7 ^2* r6-r8 ^2 */ pn3 x =pn x -t x xcoeff pn x x,4 /* degree p x */ pn2 x =pn3 x -t x coeff pn3 x x,3 degree p3 x x */ pn2_2 coeff pn2 x x,2 pn2_1 coeff pn2 x x,1 pn2_0 coeff pn2 x x,0 items divisibility items specify constraint c_8 want wrong think place made mistake values v w r_6 r_7 r_8 pretty sure constructed forgot v_0 w_0 y_0 thanks looking way work pn2_2 use following rat subst c =t8+c c +c +c +c +c +c pn2_2 b rat subst c =t7+c *c c rat subst c =t6+c *c b investigate coefficients t8 t7 t6",zero-knowledge-proofs verifiability,proofs knowledge verifiability
406,usual way using pkcs5/7 weird data given,pkcs5/7 pads remaining data elements binary representation many space requires padding useful compact following sample scenario example use case scenario use aes fixed bit block cipher encrypt user supplied data user control bytes sent limited sort language format i.e utf-8 user send following bytes pieces bytes encoded encrypted pkcs encoder anything bytes block size required cipher user wants decrypt data aes decryption succeed pkcs5/7 padding engine see pieces bytes pieces bytes removed returns pieces bytes mean original data corrupted pkcs decoder level best way handle data arrays elements padding scheme decoding data,padding,padding
407,affine decryption,message converted encrypted formula ax+b \equiv n \pmod encrypted message group numbers represents letters know letters w k following w ascii k ascii subtracting get 28002a\equiv-33696\equiv181779\pmod coprime go solving working,affine-cipher,affine cipher
408,mac-then-encrypt encrypt-then-mac,time data encrypted protected mac encryption protects passive attackers nifty encryption modes include mac eax gcm ... let assume old-style crypto standalone encryption method e.g aes cbc chaining pkcs padding standalone mac e.g hmac sha-256 assemble encryption mac mac-then-encrypt compute mac cleartext append data encrypt whole tls encrypt-and-mac compute mac cleartext encrypt cleartext append mac end ciphertext encrypt-then-mac encrypt cleartext compute mac ciphertext append ciphertext case forget include initialization vector iv encryption method identifier maced data options called mac-then-encrypt third encrypt-then-mac arguments,encryption protocol-design mac authenticated-encryption,encryption design authenticated protocol mac
409,b co-primes ax mod b x positive int gives ... b-1,b co-primes i.e \gcd b =1 a\cdot x \bmod b x\in \mathbb give result element ... b-1\,modular-arithmetic,modular arithmetic
410,technical details ongoing alleged chinese cyberattacks,lot news chinese compromising various weapons systems stealing military designs cyberwarfare reading news sources attacks popular news sites refer technical details solving complicated mathematical problems attacks cryptologic techniques chinese alleged using steal weapons designs compromise military system anyone provide technical details reference detailed in-depth description,brute-force-attack,attack force brute
411,difference mac algorithms use,looking message authentication codes found several ways create integrity message know following algorithms hmac use cryptograhpic hash function key hmac secure underlying hash function assume good thing use broken hash functions sake good practice understand better use key encryption hmac use different key gcm gcm mode operation symmetric encryption ciphers benefit key encrypt authentication cbc-mac mac based mode operation cbc conterary thought encrypt text example aes-cbc cbc-mac using encrypt mac cbc mode encryption authentication believe best thing encrypt mac explained like know given working data internet best algorithm provide integrity miss well-know-good-to-use algorithm seen terms used authentication something different integrity right authentication verifying sender pki integrity verifying received data mac message authentication know word mic seems better used wpa mac meaning someone kind explain terminology,authentication mac integrity,authentication integrity mac
412,inversion multiplication operations costly elliptic curves,several efficient scalar multiplication arbitrary point p x positive integer k elliptic curves defined f_ p f_ scalar multiplication deals point doubling adding p x point addition adding different points p x q x point doubling additions deal additions squaring multiplications inversion operations question considerable addition squaring operations involved scalar point multiplication example single point addition requires additions squaring multiplications inversion inversion multiplication ratio i/m special interest researchers performance evaluation different algorithms scalar point multiplication inversion multiplication operations dominant elliptic curve arithmetic addition squaring operations dominant considered encourage readers go table page book get clear idea question please look last columns titled ec operations field operations table,elliptic-curves algorithm-design performance,algorithm design curves elliptic performance
413,hard factorize sampled known distribution,suppose n -bit integer c drawn distribution \chi whose description known general method check particular sampling helps factorize n results direction i.e results choose rsa modulus whose factors sampled distribution,factorization,factorization
414,discovering private exponent public key,going assume possible ask trying understand trying implement following rfc srp-6a starts declaring choose n large prime g generator let say n 1024-bits g random number generated arguments sake chose length bits public key given g^a \bmod n assume server case trying debug srp-6a protocol receive know g n determine reasonable amount time guessing nice know,public-key diffie-hellman srp,diffie srp hellman public key
415,post-quantum hybrid encryption,assume following simplified protocol seed curve25519sharedkey theirpublickey myprivatekey sharedkey scrypt seed salt sufficientlyhardworkfactors ... ciphertext aes256 sharedkey cleartext using slow-hash output asymmetric key-exchange offer protection quantum-computing era know quantum computing supposed make breaking diffie-hellman easy ... know easy algorithm diminished broken,diffie-hellman post-quantum-cryptography,quantum diffie post hellman cryptography
416,rsa-blind signatures dsa-blind signatures,see rsa signature scheme tends implemented others e.g. dsa blind signatures rsa blind signature scheme scheme compared dsa dsa appears performant prone attacks timing attacks security rsa scheme proven right thanks,rsa signature blind-signature,rsa signature
417,restriction using lossless compression huge key sizes,studying mceliece multivariate public key cryptographic systems main problem huge key size restriction using lossless compression algorithms fix problem,post-quantum-cryptography mceliece,quantum post mceliece cryptography
418,bitmessage encryption work,reading protocol specification much technical detail bad articles various sites need simple words encryption bitmessage works main security flaws bitmessage detailed question want understand asymetric encryption works bitmessage collisions addresses private key stored example ie bob alice exchanging message bitmessage encryption details great btw somebody please create bitmessage tag ...,encryption public-key,encryption public key
419,guillou-quisquater unforgeable adaptive message attack random oracle model,guillou-quisquater digital signature scheme note everything \bmod n message denoted private key public key hash function h e l=s^e\bmod n sign alice chooses random r computes c=h m||x x=r^e\bmod n y=r\cdot s^c\bmod n send bob x verify bob computes c=h m||x y^e \equiv x\cdot l^c\pmod n wondering strongest known security particular question title best research done scheme scoured internet proof find anything told supervisor find proof el gamal adaptable appreciated thanks,signature elgamal-encryption provable-security random-oracle-model,elgamal encryption random signature oracle provable security model
420,possible encrypt data way decrypted key used encrypt decrypted key,new cryptography encryption apologize answer known find anything research crux problem need store data offline device trusted possible encrypt data way read device encrypts read uploads data device communicate server going offline capturing data exchange keys take place data encrypted helps,encryption,encryption
421,brute force rsa cracking,suppose complete list primes n+1 -1 able crack n -bit rsa public key time \pi n+1 -1 making rsa insecure thanks rené,rsa factorization,rsa factorization
422,h k||x secure mac construction,h secure hash function implement mac using h k||m seems used macs nmac hmac defined keying hash functions message authentication much complicated scheme concatenation scheme insecure,hash mac,mac hash
423,changing random number selected message increase security schnorr scheme,reading schnorr scheme signing signer generates random number continues operation trying implement scenario signature length small number possible messages small generating random number signing message good option case,signature random-number-generator schnorr-signature,random schnorr number generator signature
424,aes cbc encryption stream udp packets,developing application based udp need send stream packets imagine packets get lost corrupted need make sure content packets encrypted able certify packet correct receive performance crucial application like keep encryption small possible times packets small blocks build big overhead reliable previous experience cryptography thought better trust strategy used application released change less much problem packets fixed size multiple block size aes need padding messages variable length use shared key fixed ivs endpoint uses encrypt messages use aes cbc mode using fixed iv leads whole bunch security flaws need make first block vary random fashion act iv next blocks prepend block beginning packet content goes follows bytes current timestamp seconds bytes zeros compute sha256 hash message bytes xor timestamp zeros block half hash xor result second half hash receive packet endpoint decrypt key remote iv compute sha256 hash message first block xor half second half xor result hashing procedure first block get timestamp seconds bytes zeros packet correct packet correct drop receive answer sent flaws procedure,aes protocol-design cbc sha-256,design aes sha protocol cbc
425,automated testing cipher security import/export compliance,know systems test grade cipher security application mind checking compliance import/export regulations imagine system tests known plaintext chosen plaintext kind cryptanalysis operating cipher black box function subroutines openssl export ciphers exportable respect old crypto regulations want consider countries import/export policies question supposes import export compliance real concern industry many articles claiming,encryption,encryption
426,algorithm allows verification encrypted hashed bits data given know half key/ salt,interesting problem salted hash secret key known clients clients allow clients find records generated client clients clients able identify client client know secret key know salt requirement change salt months need able match last year records way see keeping current salt previous salt storing record hashes want find records look stored hashes stored hashes records double computation storage double storage times search time think something 2-part key months generate new half-key delete oldest half key key k_1k_2 months throw k_1 generate k_3 new full key k_2k_3 looking function client client passes key pass part key k_n k_ receive digest function pass digests current k_nk_ n+1 get true digests generated share least k_n k_ n+1 able tell possible go double hash storage describing sounds something possible commutative operations ...,hash salt,salt hash
427,symmetric-key login protocol,trying analyze login protocol based symmetric key cryptography starting bad idea hear thoughts protocol assumes existence agreement following symmetric-key algorithm e key derivation function kdf strong hash function h secret key k_ user u wants register server following happens generates random string b_ encrypts b_ yielding v_ e_ k_ b_ computes h_ h b_ sends pair \langle v_ h_ \rangle user server verification pair u chooses password p uses kdf get k_ u kdf p secret key u generates random string b_ u u encrypts \langle b_ u v_ h_ \rangle yielding v_ u e_ k_ u \langle b_ u v_ h_ \rangle u computes h_ u h b_ u u sends pair \langle v_ u h_ u \rangle server stores v_ u h_ u associating u username means identification used order user authenticate server protocol proceeds follows u requests login responds v_ u u decrypts v_ u getting \langle b_ u v_ h_ \rangle d_ k_ u v_ u u verifies server identity u sends v_ server decrypts v_ getting b_ d_ k_ v_ generates random bit string b'_ encrypts b'_ yielding v'_ e_ k_ b'_ computes h'_ h b'_ sends \langle b_ v'_ h'_ \rangle u verifies h b_ h_ procedure successful u continues u aborts u generates random string b'_ u u encrypts \langle b'_ u v'_ h'_ \rangle yielding v'_ u e_ k_ u \langle b'_ u v'_ h'_ \rangle u computes h'_ u h b'_ u u sends triplet \langle b_ u v'_ u h'_ u \rangle server verifies h b_ u h_ u procedure successful continues logging u aborts replaces v_ u v'_ u h_ u h'_ u user know looks involved simple proof u gives knowing decrypt ciphertext plaintext given known hash order avoid persist state user side information encrypted v_ u user verify server says means user authenticates server properties find interesting protocol particular fact keys need exchanged something shamir 3-way protocol server stores password-equivalent information furthermore resembles lamport chained hash login s/key questions work evident attacks better worse worse authentication protocol said security provided protocol furthermore keep symmetric-cipher hash based sorry lengthy description welcome edit someone knowledgeable,protocol-design authentication symmetric,symmetric design authentication protocol
428,calculate private key rsa,given n=pq p q known calculate \phi n e selected \gcd e \phi using calculate rsa private key example n p q computed \phi n =24 selected e \gcd e \phi taking e=23 calculate private key,rsa,rsa
429,yao garbled circuit bob see circuit,asked question circuit structure yao garbled circuit needs rearranged understand lindell response circuit structure need changed garbled gate ciphertexts need garbled new question mean safe bob able know structure circuit able know values wire fine know example gates gates seems safe reasoning let say gate g_s gate circuit input wires w_i w_j output wire w_k based summary g_s gate alice computed following values x_s^ k_i^0 k_j^0 k_k^0 x_s^ k_i^0 k_j^1 k_k^0 x_s^ k_i^1 k_j^0 k_k^0 x_s^ k_i^1 k_j^1 k_k^1 shuffled renamed values x_s^1 x_s^2 x_s^3 x_s^4 sent bob k_i^0 key w_i value bob access hashes keys wire know key represents wire represents say bob k_i^ v_i k_j^ v_j v_i v_j\in\ values wires w_i w_j say bob calculates k_j^ v_j \oplus x_s^ \oplus x_s^ =k_j^ v_j \oplus k_j^1 k_j^ know key k_j^ 1-v_j k_j^0 k_j^1 keys wire w_j know x_s values x_s^ x_s^ try combinations alice given auth k_j^ 1-v_j auth trapdoor function bob apply function values see matches value gave way bob find key k_i^ 1-v_i bob know keys represent represent know gate calculates value output wire key value combinations input wire key values output key k_k^0 k_k^1 bob know key represents represents understand bob deviated algorithm compute meant compute send alice output bob honest-but-curious seems honest-but-curious bob knows types gates circuit discover keys represent represent flaw reasoning thanks advance,multiparty-computation garbled-circuits,garbled circuits computation multiparty
430,-diffie hellman inversion easy g known,define \ell -diffie hellman inversion problem given g^ g^ a^2 \ldots g^ \ell \in g compute g^ a^ -1 problem become easy generator g known,diffie-hellman,diffie hellman
431,brute force ciphered message,wrote cipher encrypt messages like test sample ciphered message see strong tools task windows linux,encryption cryptanalysis brute-force-attack,encryption attack force brute cryptanalysis
432,authentication procedure using rabin crypto useful,friend asked following pointing method useful problem see good consider person chooses n public key rabin crypto-system want sure communicating person send random item r\equiv m^2 \mod person receives r decodes using factorization n finds square rot m_1 r sends m_1 check r\equiv m_1^2 \mod useful,authentication authenticated-encryption rabin-cryptosystem,encryption authentication authenticated cryptosystem rabin
433,predicate encryption supporting disjunctions,missed subtlety definition attribute hiding found paper predicate encryption possible construct scheme predicate encryption supporting disjunctions less convoluted supports attribute hiding realize convoluted matter opinion think falls scope admissible subjective questions laid faq let \mathbb g multiplicative group prime order q generator g computational diffie-hellman hard \mathbb g let f set n predicates let \sigma corresponding set attributes power set f keygen trusted party performs following operation predicate f_i \in f select uniform values x_ f_i s_ f_i \in \mathbb z_q let w_ f_i g^ s_ f_i let public key pk_i corresponding predicate f_i x_ f_i w_ f_i private key s_ f_i keydist entity k assigned set predicates f_k \subset f f \in f_k trusted party distributes corresponding private key s_f k enc generate secret value w \in \mathbb g used deriving symmetric key authenticated key encryption attribute \in \sigma follows select \leftarrow_ uniform \mathbb z_q n f_i \in u_i x_ f_i v_i w_ f_i ^s u_i \leftarrow_ uniform \mathbb z_q v_i \leftarrow_ uniform \mathbb g let l_i x i=1 ^n lagrange basis polynomials corresponding ordered set u_i i=1 ^n let p x \pi_ i=1 ^nv_i^ l_i x calculate w p g^s \le \le n-1 r_i p output r_i i=1 n-1 key encrypted key payload cipher text dec f \in f_k let l_i^\prime x i=1 ^n lagrange basis polynomials corresponding .. n-1 x_f let r_n t^ s_f let p^\prime x \pi_ i=1 ^nr_i^ l_i^\prime x calculate w_f p^\prime w_f decrypts key encrypted key let w w_f use w decrypting key encrypted key payload cipher text difference scheme referenced paper latter decrypting entities get secret keys blinded respect predicates included secret key tell definition attribute hiding definition page require blinding adversary chooses attributes i_0 i_1 requests secret keys predicates f_i subject restriction f_i i_0 f_i i_1 let f_j f_j i_0 \ne f_j i_1 adversary attacking scheme tell r_i i=1 n-1 encryptor used v_j w_ f_j ^s v_j \leftarrow_ uniform \mathbb g least solving ddh \mathbb g missing something,predicate-encryption,encryption predicate
434,jettison mac sha1,using ssl aes-cbc hmac file transfer containing string m. suppose alice knows sha1 adversary downloads using aes-cbc mac ill-advised check sha1 download completes secure,encryption hash mac integrity,encryption mac hash integrity
435,implementation specific differences rdrand rdseed,read intel difference rdrand rdseed intel digital random number generator drng software implementation guide open questions specific usage application work wei dai crypto++ c++ class library crypto algorithms schemes library provides access intel rdrand rdseed instructions crypto++ library applies maurer randomness test trngs output rdrand rdseed rdseed provides value rdrand provides value occasion first question numbers produced rdseed appear better quality numbers provided rdrand maurer test crypto++ library provides additional tests library attempts fetch bytes second reads bytes first test attempt ensure generator produce steady stream tests library retries failed operation times failed operation means random number produced generator signaled carry flag cf rdrand rdseed reaches failure limit api call fails rdrand fulfills request seen fail rdseed fails occasions maximum number retries reached second question rdseed suffer depletion appears rdrand appears rdseed simpler generator rdrand realize maurer test statistical test future runs years turn results head feel seeing trends repeated random samplings days weeks understand little difference practice grab extra bytes run hkdf extract entropy morbid curiosity crypto++ source files available rdrand.cpp c++ file calls routines provided microsoft assembler masm/ml found get greater throughput providing hand tuned bulk requests i.e. avoid intrinsics rdrand routine found line rdrand.asm rdseed routine found line rdrand.asm example tests applied generators including rdrand rdseed windows shown,random-number-generator cryptographic-hardware,cryptographic hardware random number generator
436,recovering key elgamal signature scheme variant,page stinson cryptography theory practice question suppose alice using elgamal signature scheme order save time generating random numbers k used sign messages alice chooses initial random value k_0 signs th message using value k_i k_0 \mod p-1 therefore k_i k_ i-1 \mod p \geq suppose bob observes consecutive signed messages say x_i sig x_i k_i x_i+1 sig x_i+1 k_i+1 describe bob compute alice secret key given information solving instance discrete logarithm problem note value known succeed class demonstrated solve k k reused messages figured something similar work big part solution solve r \equiv \alpha^k \mod p r time r_i \equiv \alpha^ k_i \mod p r_ i+1 \equiv \alpha^ k_i \mod p-1 \mod p kind loss go come solve k define k terms anybody lend hand appreciated,elgamal-signature,elgamal signature
437,luby-rackoff theorem confusion,luby-rackoff theorem states round function secure pseudorandom function prf rounds sufficient make block cipher pseudorandom permutation prp prps invertible whereas prfs come rounds prf make invertible block cipher non-invertible function,pseudo-random-function pseudo-random-permutation luby-rackoff,function random pseudo luby permutation rackoff
438,solving discrete logarithm using gdlog,trying calculate x g^x \pmod p order crack weak elgamal encryption university found gdlog cant figure use input calculate x got gdlogs example code p:1000000000000000000000000000057 //prime number modulus q:290240017 // p-1 /2 g:5 //generator //member group gdlogs result logarithm question number gdlog outputs written readme find \le x q g^ x p-1 /q \pmod p b^ p-1 /q \pmod p assuming x exists figure,discrete-logarithm finite-field,logarithm discrete finite field
439,attacking unuauthenticated rsa,symmetric cryptography scheme considered secure data transmitted encrypted adversary able modify messages generate encrypted messages choice key applicable asymmetric crypto rsa,rsa authentication forgery,forgery authentication rsa
440,distribute session keys public key cryptography,public key cryptography use session keys symmetric sender say provides session key information clients sender provides session key encrypting using private key clients including malicious decrypt using available public key see session key right server use public key encrypt session key none clients private key decrypt wondering information missed understand basic idea distribution session key,encryption public-key implementation tls symmetric,tls implementation encryption symmetric key public
441,key handling multi platform applications,working mobile application signed send encrypted data backend user log website laptop view encrypted data decrypted plan use aes encryption figure good solution handle key user password bit strong use user password encryption generating key storing somewhere remote database bad idea opinion key accessible intruder best practice handle situations,aes,aes
442,choosing finite field size shamir secret sharing scheme,wikipedia article shamir secret sharing says information theoretical security splitting algorithm evaluated using finite field arithmetic field \rm gf p p n p number shares information shared suggests hand p large attacker knows s\in\mathbb z /p\mathbb z suggests p large attacker knows p\uparrow \rm p f x \bmod p f x \uparrow choose value p confident choice charles karney implementation splits pieces \forall s_i\in\rm gf understand specific reason use p=257 prime number instance elements s_i stored bit value p=251 chosen,secret-sharing finite-field shamir-secret-sharing,field secret sharing shamir finite
443,ecdh rsa secure symmetric key wrapping,suppose message encrypted symmetric block cipher random key rsa used wrap symmetric key using recipient public key case size message increased block size rsa encryption depending size much bigger actual size symmetric key leads using special padding schemes oaep example assuming want 128-bit security 128-bit symmetric key encrypted 2048-bit rsa yields byte output times size symmetric key hand increase size issue make use ecdh safe curve take recipient public key rp generate random value compute rsp use kdf obtain symmetric key x -coordinate encrypted message sent sender public key sp case 128-bit security uses safe curve 256-bit prime field size sp x -coordinate bytes size symmetric key comes question demanding scalar point multiplications exponentiation additional security considerations take substituting rsa ecdh case,rsa elliptic-curves diffie-hellman key-exchange,hellman elliptic exchange rsa curves key diffie
444,strong pen-and-paper mind cipher,ciphers talked “is secure cryptosystem performed ” time writing see answer strong non-computer ciphers less abandon using practical purposes,pen-and-paper,pen paper
445,adversary distinguish private key pseudo-random string length,apologies dumb question describe dilemma suppose protecting private key device using password pbkdf2 obvious attack offline bruteforce attacker know password used protect private key access private key important undisclosable reason password used protect private key small search space i.e complex short length controls mind key pair generated device send public key backend public key stored device private key mitigate bruteforce attack attacker know decrypted blob private key able correlate corresponding known public key hope makes sense encrypt private key using pbkdf2 provide known plaintext adversary -- -- -begin rsa private key -- -- -- -- -end rsa private key -- -- private key used generate signature verified end limited attempts mitigating offline attack using salt slow derivation function hope wrong attacker able distinguish private key pseudorandom blobs received decrypting using various password attempts bruteforce attack correct understanding missing fundamental mathematical understanding rsa cryptosystem asymmetric cryptosystem debunks controls wish understand distinguishability private key pseudorandom string length negligible,rsa public-key pbkdf-2 known-plaintext-attack distinguisher,plaintext distinguisher rsa attack key known pbkdf public
446,efficient robust private set intersection questions,trying implement efficient robust private set intersection using additive elgamal trying run full protocol mentioned section following inputs prime g generator x private key k g^x \pmod p \pmod public key suppose clients inputs p x x-1 x-2 x^2-3x+2 therefore coeffiecients encrypt -3 chose encrypted values becomes -3 becomes becomes server side input set random value r0 corresponding r_0=2 problem context questions p j refer step please give example step variable introduced j. j refer step enc function interpret enc b,elgamal-encryption private-set-intersection,encryption intersection set elgamal private
447,making public key fingerprints sha1 hash good idea,thinking trying save space readability referencing public keys millions storing fingerprint places full public key primary threat security fingerprint preimage attack attacker constructs key pair whose public key hashes fingerprint matches victim fingerprint attacker present public key place victim public key masquerade victim secondary threat systems collision attack attacker constructs multiple key pairs hash fingerprint allow attacker repudiate signatures created cause confusion wikipedia mind wondering using larger hashing algorithm sha-256 help prevent collisions collision attacks sha1 seems existing standard way go,hash rsa public-key,hash rsa key public
448,elliptic curve point addition z_1 z_2,elliptic curve point addition point doubling operations using projective jacobian coordinates require fewer field multiplication operations considering z coordinates input points equal z_1=z_2=1 drawback strategy,elliptic-curves,curves elliptic
449,pictographic phoneme-based hand cipher difficult crack computer crypt-analysis,talking hand cipher uses phonemes individual characters pictograms usual shuffling/substitution methods e.g caesar solitare vignere pictograms composite images made smaller images represent phoneme word images drawn hand deter computers breaking cipher thinking difficult input images given current image recognition utilities,encryption,encryption
450,aes-256 bit encryption secure kind attack,came article http //www.cs.tau.ac.il/~tromer/acoustic/ put computers risk decryption,rsa,rsa
451,pq key exchange based elliptic curve isogenies,reading wikipedia article post quantum cryptography interested opinions supersingular elliptic curve isogeny diffie-hellman listed good post quantum replacement elliptic curve diffie-hellman implemented today,public-key elliptic-curves post-quantum-cryptography,key cryptography curves elliptic quantum post public
452,stronger aead,posts come seem infer using regular encryption mac better using newer aead ie aes/gcm modes http //www.daemonology.net/blog/2009-06-24-encrypt-then-mac.html http //blog.cryptographyengineering.com/2011/12/matt-green-smackdown-watch-are-aead.html questions aead likely fail subject chosen plaintext attacks versus hmac protecting encrypted part fail catastrophic way assuming generated hmac encryption keys encrypt+hmac secure,hmac authenticated-encryption,encryption authenticated hmac
453,encoding numbers decoded,lot objects need particular number tagged tell customer problem customer know numbers say much buy object way encode decode understand words mean,encryption,encryption
454,concerns using hash determine specific input data encrypted,system used store account numbers account number added system encrypted stored database iv reference encrypted record returned encrypted record retrieved date second request identical account number made creating new record existing reference returned avoid duplicate entries database storing hash account number record provide means determine particular account number stored concerns implications hash used identify account numbers gather secure modern-day cryptographic hashes pre-image resistance hash reversed account numbers come limited set account numbers determined hashes brute force ways protect increasing number hash iterations slow brute force attempts point hashes considered security issue selecting iterations use general size iterations things consider ... value selecting non round number hash iterations using hash lookup value individual record level salts usable presume using system specific salt useful minimise use pre-built rainbow tables storing system salt different location hashes stored i.e database offer value security obscurity,hash,hash
455,authenticated encryption unnecessary message signed,necessary use authenticated encryption message tampered authentecation omitted message authenticated,signature authentication authenticated-encryption,encryption authentication authenticated signature
456,xts cheapest form secure double-encryption,xts given equation mode operation targeting full-disk encryption scenarios way works doubles keylength meet-in-the-middle attack applies enumerating whitening values needs calculate whitening value sector way break xts double application thereof less time and/or space expected expected time standard xts time 256-bit aes time space double encryption relation title xts well-known used scheme turning 256-bit cipher 512-bit mode way block requires finite field multiplication encryption operation blocks e.g require additional encryption operation means cheap way double encryption question good sounds equation documented veracrypt c_1=e_ k_1 p_1\oplus e_ k_2 n \otimes\alpha^i \oplus e_ k_2 n \otimes\alpha^i c_1 ciphertext p_1 plaintext k_1 k_2 keys n sector index block index sector denoting bitwise xor \otimes denoting multiplication binary field gf \bmod x^ +x^7+x^2+x+1 e_ k_2 n \otimes\alpha^i called whitening value justification expected time space values single encryption case single-key xex providing 256-bit security combined 256-bit keyed permutation needs find correct whitening key correct permutation double encryption case standard meet-in-the-middle attack enumerate possible intermediate values time space try decrypting ciphertexts possible keys looking intermediate matches,meet-in-the-middle-attack xts,meet attack xts middle
457,toy encryption system provides hints,looking toy encryption system specific property decrypting key enough key used encryption produce original plain text idea use game/teaching system kids try break cyphertext using cryptanalisys cyphertext want try different keys decrypted provide close key example encrypt attack dawn key let say cyphertext abcdefghiklmn try decrypt cyphertext key example display plaintext order hint breaker key close real think encryption system la simple substitution cipher kind trick wondering ciphers behave way preferrable smaller key space,pen-and-paper,pen paper
458,elliptic curve factorization elliptic curves suited kind task,working presentation paper talks factorization large numbers paper elliptic curves presented way factorize large numbers hearing lot elliptic curves first time delve details elliptic curves bit bit baffled say least question elliptic curves suited factorization numbers paper stated integer number n exist various suited elliptic curves used factorization meaning checking multiple elliptic curves number parallelized real reason mathematical point view elliptic curves used kind task,elliptic-curves factorization,curves elliptic factorization
459,test vectors ciphers,implementing ciphers /hash functions ... face problem find test vectors guarantee program correct tedious job find test cases planned post question question gathering test vectors several ciphers /hash functions ... list ciphers includes limited rc4 ciphers estream round-wise possible aes ... head-start put test cases rc4 correct wrong key keystream ... key keystream ...,test-vectors,test vectors
460,calculate pi estimate randomness,testing suites calculate \pi pi using monte carlo method determine series numbers random tell monte carlo method used estimate \pi numeric means calculating happens use random numbers \pi testing numeric sequence randomness seems plotting random points outside circle get \dots achieves plotting points /outside triangle get something special circular shape pertinent cryptography,cryptanalysis randomness statistical-test,test randomness statistical cryptanalysis
461,password salts equivalent keystream,reading keystream came definition keystream stream random pseudorandom characters combined plaintext message produce encrypted message ciphertext characters keystream bits bytes numbers actual characters a-z depending usage case wondering stream random pseudorandom character equivalent salt appended passwords,encryption symmetric salt terminology,symmetric encryption salt terminology
462,good idea use bitwise xor set md5 sums,designed sql aggregate function oracle bitwise xors md5 sums values stored column example table -- -- -+ -- -- -- -- -- -- -- -- -- -+ key sequence value -- -- -+ -- -- -- -- -- -- -- -- -- -+ empty -- -- -+ -- -- -- -- -- -- -- -- -- -+ run following query oracle select key sequence value dual union select dual union select dual union select dual /* ... select key md5_agg value group key get unfortunately aggregate functions oracle null values considered -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- |key| md5_agg value -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -+ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- like use approach compare contents columns equal compare subsets table think finding duplicates complex structures spans multiple rows table results know subsets keys limits approach ones list interesting column contains distinct values columns contains string xor operation no-op due limitations column contains empty values count limitations mind possible infer equal md5_agg results computed distinct non-empty values original values make sets order reformulate odds md5 sums distinct strings xor,md5 xor,xor md5
463,security cryptographic padding compared methods blockcompletion block ciphers,said heading want know security different padding methods ansi x.923 iso pkcs7 compared methods reach needed block size ciphertext stealing residual block termination counter mode operation heard oracle attacks possible padding applied methods disadvantages higher complexity possible ways problem forgot recommended,block-cipher padding-oracle padding,padding oracle cipher block
464,compare approaches cracking rsa key,came questions studying crypto course anyone ideas answer random prime numbers size bits chosen generate rsa modulus size bits knowing number field sieve factorization algorithm succeed factorizing rsa modulus size elementary operations average compare following approaches cracking rsa key i. factorizing using aforementioned number field sieve factorization algorithm ii factorizing enumerating candidate prime factors looking divides b question time primes p q make modulus n pq longer chosen derived user-supplied password e.g. pseudo-random generator map password pseudo-random number r length use primality testing find first prime greater r. feel free make reasonable assumption need regarding password,rsa prime-numbers factorization,prime rsa factorization numbers
465,construct points discrete logarithm,assume elliptic curve e tate ate ... pairing g_1 \times g_2 \mapsto g_t task find g_1 g_1 \in g_1 g_2 g_2 \in g_2 discrete logarithm x equal i.e g_1 g_1^x g_2 g_2^x easy comes hard part done knowing x constructor points provide proof know x g_1 g_1^x easy hashing group g_1,elliptic-curves pairings,curves elliptic pairings
466,correct procedure cycle walking using fpe,encrypt value set say range years rank set ... take value want encrypt set year determine ranked value convert binary encrypt binary value using fpe en n iteration lands outside desired maximum take en encrypt fpe en en+1 stop en+1 range repeat step questions correct way perform cycle walking using fpe smallest probability landing outside desired range largest note case using bps fpe restriction least input binary number smallest input values possible 00 decimal smallest range create values probability landing outside values correct max probability landing outside smallest range probability getting smaller range increases,format-preserving,preserving format
467,rsa rationale prime p p-1 prime factor u u-1 large prime factor,rsa paper recommended things choose primes p p-1 large prime factor u motivated pollard p-1 algorithm authors state additional security provided ensuring u−1 large prime factor motivation,rsa prime-numbers,prime rsa numbers
468,think cryptography solution,peter g. neumann mean think cryptography answer problem know problem eg quoted new york times february,provable-security,provable security
469,difficult find desired output hash digest msb vs lsb,question comes seeing custom bitcoin addresses special string beginning generated way bitcoins mined hashing nonce password get desired output question hard find hlowrld m9vveeblcy4uc4vjpps6rztfbqe find hlowrld find hlowrld *note values digest brackets value reverse question given insane computer easier try find input hlowrld m9vveeblcy4uc4vjpps6rztfbqe hlowrld versus hlowrld,hash,hash
470,using additional authenticated data secondary key,implementing cipher gcm ccm mode provided option additional authenticated data aad required decrypting cipher text seems used data specific label edit clarify example used seen want encrypt number shares stock purchased need make sure number corresponds correct stock use aad containing name stock wondering use aad secondary key keep secret thanks,encryption aes gcm,encryption aes gcm
471,calculate secret key size cp-abe scheme,calculate real size key cp-abe scheme example gswv scheme fuchun guo susilo duncan wong vijay cp-abe constant-size keys lightweight devices papers \mathbb g _1=160 bits \mathbb g _2=512 bits length decryption key g paper size key |s_k|=|\mathbb g _1|+|\mathbb g _2|=2\cdot bits -bit security \mathbb g _1 \mathbb g _2 elliptic curve bilinear groups paper original paper key |s_ k_\mathbb |=|\mathbb g _1|+|\mathbb g _2|=672 bits confused understand calculate size key \mathbb g _1 \mathbb g _2 calculate size key case n\mathbb g confused calculate n\mathbb g =|\mathbb g _1|+|\mathbb g _2| g =n\cdot|\mathbb g _1|+n\cdot|\mathbb g _2|,key-size pairings abe encoding,encoding pairings key size
472,use cases implementations rsa crt,discovered chinese remainder theorem crt version rsa cryptosystem used many crypto libraries openssl java ... use theorem improves speed decryption applied disadvantages version explain implemented,rsa implementation,implementation rsa
473,perfect collision-resistence probability terms,update removed lots stupidity ... sorry know stupid achieved goal let \mathcal universal space plain data goal find function h \mathcal \rightarrow ^n positive constant d_1 d_2 \in \mathcal probability h d_1 h d_2 i.e unlikely collisions note reason require probability think minimum possible collision probability appreciate anyone correct questions minimum achievable probability collisions dataset methods perfect dataset i.e best average best specific datasets perfect dataset great describe probability terms attempt let z \mathcal \rightarrow \mathcal z function d\in\mathcal function u d\in\mathcal u z \texttt len z h \texttt len z number bits z h shannon entropy i.e z perfect lossless compression function wish \texttt len z \le n achievable way z collision-free implementation h reality input contain much information represented n many bits simplicity assume \in \mathcal \texttt len z \ge n way perfect compression function z known finding perfect collision-free hashing function h matter choosing bits z kept h process deciding bits kept h needs satisfy d_2\in\mathcal probability h d_1 =h d_2 kept process producible computing h give output compute h future choosing n bits method d\in\mathcal early bits z important latter bits helping set apart others \mathcal \setminus\ d\ early bits important choose first n bits i.e h z n z n denotes n bits z note implemented python case day someone included wishes evaluate hashes others see bad choosing n bits method method assume bit important bit choosing first n bits z choose n bits z order make reproducible seed random selection python-inspired notation looks first set seed prng \texttt random.seed z z_ \texttt shuffled \texttt random.shuffle \big z \big h z_ \texttt shuffled n note view z prng used random shuffling perfect method perfect collision-resistant hashing function assumption states bits z important note coded python found,hash collision-resistance,collision hash resistance
474,rsa calculate private exponent,problem rsa algorithm considering n=33 modulus public exponent e=3 calculate corresponding private exponent know e^ -1 \pmod \varphi \varphi n p – q – know p q,rsa modular-arithmetic,modular rsa arithmetic
475,using one-way hashing possible tell number characters changed old new password,day changing password solaris system surprised able detect changed enough characters new current passwords mindiff password security configuration parameter specifies minimum number characters need different current new password password changed sure solaris using one-way hashes protect secrecy plain-text password got thinking solaris system detect characters changed passwords using one-way hash validate passwords,hash passwords,passwords hash
476,muchomor cipher,given task research implement called cipher anybody heard cipher found article russian fluent russian able read appreciate data look know block symmetric cipher,block-cipher symmetric reference-request,symmetric cipher request reference block
477,use cbc send iv assume first plaintext block garbage,possible duplicate using cbc fixed iv forgive asked looked seen answers suit danger using cbc encrypting message initial block garbage discarding iv decrypting use random iv discard resulting initial plaintext block sure confront question,initialization-vector cbc,cbc initialization vector
478,question security proof authenticated identity-based encryption,authenticated identity-based encryption benn lynn proof security little difficulties understanding key extraction queries attacker request guessed id b fails think b generate private key guessed id attacker challenges messages m0 m1 identities identities guessed id b fails.in scenario think encrypt guessed know private key fails identities guessed id please guide correct thinking,identity-based-encryption,encryption based identity
479,elgamal multiplicative cyclic group key generation,elgamal wikipedia page http //en.wikipedia.org/wiki/elgamal_encryption alice generates efficient description multiplicative cyclic group g order q generator g. done properties,public-key elgamal-encryption,encryption elgamal public key
480,risk attacker decrypting rsa ciphertext public private key,previous question trying decide worth use offline private key protocol creating long term private archives going simple symmetric encryption aes-256 answer question pointed using rsa encrypt symmetric encryption keys make solution secure practical advantages wanted ask question say rsa broken mean practical attack discovered retrieve private key public mean given ciphertext knowledge private public key attacker decrypt data thinking case risk public key leaking trusted system key-wrapped symmetric encryption small broken mean alternative assume moment risk rsa public key leaks i.e public wondering practical rsa+aes solution reason less secure secure plain symmetric method thank,rsa public-key aes,aes rsa key public
481,openpgp public-key algorithm,means pgpdump shows kind algorithm public-key encrypted session key packet new public-key encrypted session key packet tag bytes new version key id pub alg reserved elliptic curve pub unknown pub sym alg byte checksum bytes pkcs-1 block type means sym byte checksum bytes pkcs-1 block type elliptic-curve-based operation made sender software,elliptic-curves pgp,pgp curves elliptic
482,example software security white box cryptography strong hardware security,reading white box cryptography last 2-3 days wondering example white box cryptograhy broken cracker hacker fact windows operating systems jailbroken ios android devices good examples relying software security white box cryptography sufficient order protect softwares piracy vendor protected software security white box bulletproof hence see 1-2 weeks new release pirated jailbroken,cryptanalysis,cryptanalysis
483,representing points elliptic curve finite field,taken elliptic curve e\colon y^2=x^3-4x+20 defined \mathbb f number points curve \left|e \mathbb f \right|=37 took base point p= got following results want results know behaviour curve tool show results giving input curve points,elliptic-curves,curves elliptic
484,decrypting des decrypted encrypted data,got 8-byte strings decrypted ff ff ff ff ff ff ff ff encrypted b0 c2 encryption mode ciphermode.ecb need key used des encryption,encryption des cryptanalysis,encryption des cryptanalysis
485,private key stored communicate website uses ssl/tls,communicate website uses ssl/tls browser generate private key browser store key hard disk store ram,public-key tls,tls public key
486,trying safe,parties server master secret ms server supported versions svers agreed version ver client master secret ms client supported versions cvers agreed version ver planning client sends cvers checks version use highest version share selected computes rand generate crypto random number sessionid sha256 ms ver rand hash dependable selected version sessionkey kdf ms sessionid encryptionkey kdf sessionkey rand iv/nonce generate crypto random number server sends message client sessionid ver rand iv/nonce client checks returned version got version sure client computes sessionkey kdf ms sessionid encryptionkey kdf sessionkey rand need extra key hmac send random number client create random message encrypt message propper way according selected version send random message ciphertext server server decrypt client compare results results match send ok message client communication commence questions regarding secure need session key derive encryption key ms provided rand different time generation sessionid ok way simple random number suffice client create random message send plain text server client message coded session hope ok ask kind questions disclaimer lets start saying yes know making protocol bad mkay discussed length supervisors made point tls implementation small fit devices remaining code space implementing hurts saying small tls-ish protocol versions correspond tls version aes-cbc version aes-gcm version met tdes-cbc etc,tls key-exchange,tls key exchange
487,key sizes discrete logarithm based methods,question regarding key generation process methods based discrete logarithm problem site gives good insights grasp think http //www.keylength.com/ example know used bit group modulus bit long secret key picking secret key size double security level bit security wants achieve question groups size relate security level group generator size group modulus,discrete-logarithm key-size,logarithm discrete key size
488,double encryption using key,new crypto wondered happen encrypt using algorithm key consider block ciphers b. generate ciphertext c b message m. message space map ciphertext space using key schemes make encryption insecure understood meet middle attack general idea collisions using functions mapping ciphertext space approach edit looking attacks case encryption undoes decryption eg b inverse,encryption keys,keys encryption
489,rationale r key use otr version ake protocol,tried review understand ake authenticated key exchange protocol defined otr secure messaging protocol version aiming achieve perfect secrecy little bit confused described handling r aes key presented dhe ephemeral diffie-hellman protocol dhe used asymmetric way g^x sent encrypted r aes key bob g^y sent clear form alice r step sent clear form bob g^x recovered alice rationale r key use seems strange g^x hidden alice bob check g^y legal value missed real reason,protocol-design diffie-hellman key-exchange perfect-secrecy,perfect hellman exchange secrecy design key diffie protocol
490,show shift substitution vigenere ciphers trivial break using known-plaintext attack,think use notion knwn plan text pairs cipher plantext msg try find way recover key dont knw make knowing key len,blocksize,blocksize
491,convert aes prng order run statistical test suite,want run statistical tests implementation convert prng standard way go find much information done nist selection aes days,aes random-number-generator implementation nist,aes generator implementation random number nist
492,ssl secure initial handshake,reading ssl specs seems initial handshake authenticity protection prevent say attacker overwriting available ciphers list full broken null ciphers sort defense unsolvable handshake part definition authenticated leads infinite regress way authenticate initial non-authenticated part ssl connection,tls standards,tls standards
493,unusual non power-of-two rsa key size secure,blog https //blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/ following sentence generate master key use bit rsa key key size selected based assumption people focus efforts crack rsa keys usual power-of-two key sizes leaves wonder unusual key sizes pose disadvantage potential attacker get key size public key,rsa pgp,rsa pgp
494,represent point-at-infinity affine coordinate,projective coordinates point-at-infinity identified z=0 identify point-at-infinity affine coordinate x=0 y=0 considered point-at-infinity affine coordinate,elliptic-curves,curves elliptic
495,mceliece chosen plaintext secure,suppose challenger creates encryption system public key consisting matrix g representing linear code number number errors adversary takes messages m_0 m_1 uses public key matrix g find c_0=gm_0 c_1=gm_1 adversary sends m_0 m_1 challenger challenger picks b random creates c=gm_b+e e errors send c adversary adversary calculates e_0=c-c_0=gm_b+e-gm_0=g m_b-m_0 +e e_1=c-c_1=gm_b+e-gm_1=g m_b-m_1 +e m_b messages e_0=e e_1=e adversary knows happens e fewer non-zero terms e_i consist non-zero codeword error minimum distance code greater equal codeword least non-zero terms e subtracted least t+1 non-zero terms adversary sure message hence adversary chance guessing b attack work aspect mceliece system know stops attack,post-quantum-cryptography chosen-plaintext-attack mceliece,cryptography chosen mceliece plaintext attack quantum post
496,possible find plaintext ciphertext n known rsa,couple questions pertaining rsa problem need ciphertext find original plaintext modulus n exponent encrypting function e x x^ \mod using fermat little theorem start encrypted plaintext decrypted know required numbers particular rsa system given work plaintext ciphertext n known step encryption process reverse effective cryptanalysis method work original plaintext n small small note needs calculated using system specific computer function,rsa public-key cryptanalysis,cryptanalysis rsa key public
497,mutual verification shared secret,possible develop scheme parties unsure secret verify share secret party able cheat come knowledge detected party let explain using example friends bob charlie given bob symmetric keys requires use communicate k_a k_b alice bob expect keys different concerned charlie reused key laziness alice bob like verify keys way come certain k_a k_b come believing k_a \not= k_b words want prevent possibility party discover k_a k_b conceal party comes believing k_a \not= k_b unaware foul play taken place note let assume alice bob communicating secure channel authenticated let h secure hash function naive approach scheme -- alice sends h h k_a bob -- bob sends h k_b alice problem bob receive h h k_a calculate h h k_b equal send h \textrm random data alice believe key different bob fact able decrypt messages tagged commitments guess way solve problem solved alice bob commit something verification messages transmit change send party realising able use zero-knowledge proofs tagged idea alice bob reveal keys bit time commitment scheme sends h \textrm bit _i||\textrm nonce _i bit keys take turns reveal nonces mismatch stop sending nonces cheating party learns bits depending guess bits ideal better party learning everything,zero-knowledge-proofs commitments,proofs knowledge commitments
498,security consideration use random number digital signature,key-exchange protocol allows parties establish shared key public network lacking authentication original diffie–hellman key exchange insecure man-in- -the-middle attack concept authenticated key exchange protocol proposed.in family authenticated dh protocols method authentication implicit authentication example hmqv explicit authentication example sigma .implicit authentication efficient explicit authentication needs digital signature less efficient signing message random number used implement key-exchange protocol authenticated digital signature parties b need generate public private key pairs ephemeral keys party private key public key a=g^a g generator cyclic group ephemeral key x x choose set party b b b x doubt party going sign message use random number generated x generate new random number specify signature security threat uses x sign message,public-key signature diffie-hellman key-exchange,hellman exchange key signature diffie public
499,measuring entropy ciphertext attack,bruteforcing password e.g common attacks des ciphertext need way decrypted plaintext believe eff des machine checking chars printable course works ascii files things images measure entropy observed 0th order byte level see attributed randomness good method known method find tables indicate given generated message size x p probability entropy types tables used instance chi-squared testing response d.w ciphertexts kb information able decrypt dictionary attack plaintext ascii imagine others case easy distinguish valid decrypts nonvalid check chars printable course others ascii files try way knowing interested method general instance looking sample output unknown cryptosystem good way obvious statistical problems reverse engineering binary applications looking data trying assess binary data encrypted find question interest applications,entropy brute-force-attack statistical-test ciphertext-only-attack,ciphertext force brute attack statistical test
